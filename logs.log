2025-05-29 10:52:11,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:52:11,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:52:11,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:52:11,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:55:23,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:55:23,990:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:55:23,990:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:55:23,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:59:02,652:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:59:02,652:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:59:02,652:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 10:59:02,652:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:04:45,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:04:45,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:04:45,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:04:45,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:12:09,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:12:09,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:12:09,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:12:09,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:15:04,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:15:04,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:15:04,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:15:04,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:15:23,108:INFO:Initializing load_model()
2025-05-29 11:15:23,108:INFO:load_model(model_name=models\modelA, platform=None, authentication=None, verbose=True)
2025-05-29 11:15:23,110:INFO:Initializing load_model()
2025-05-29 11:15:23,110:INFO:load_model(model_name=models\modelA, platform=None, authentication=None, verbose=True)
2025-05-29 11:15:23,114:INFO:Initializing load_model()
2025-05-29 11:15:23,114:INFO:load_model(model_name=models\modelA, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:29,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:23:29,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:23:29,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:23:29,623:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:23:53,581:INFO:Initializing load_model()
2025-05-29 11:23:53,581:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:53,871:INFO:Initializing load_model()
2025-05-29 11:23:53,871:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:53,970:INFO:Initializing load_model()
2025-05-29 11:23:53,971:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,730:INFO:Initializing load_model()
2025-05-29 11:23:54,730:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,761:INFO:Initializing load_model()
2025-05-29 11:23:54,761:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,809:INFO:Initializing load_model()
2025-05-29 11:23:54,809:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,850:INFO:Initializing load_model()
2025-05-29 11:23:54,850:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,902:INFO:Initializing load_model()
2025-05-29 11:23:54,902:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:54,933:INFO:Initializing load_model()
2025-05-29 11:23:54,933:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,015:INFO:Initializing load_model()
2025-05-29 11:23:55,015:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,053:INFO:Initializing load_model()
2025-05-29 11:23:55,053:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,089:INFO:Initializing load_model()
2025-05-29 11:23:55,089:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,127:INFO:Initializing load_model()
2025-05-29 11:23:55,127:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,169:INFO:Initializing load_model()
2025-05-29 11:23:55,169:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:55,200:INFO:Initializing load_model()
2025-05-29 11:23:55,200:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:57,958:INFO:Initializing load_model()
2025-05-29 11:23:57,958:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,022:INFO:Initializing load_model()
2025-05-29 11:23:58,022:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,059:INFO:Initializing load_model()
2025-05-29 11:23:58,059:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,707:INFO:Initializing load_model()
2025-05-29 11:23:58,707:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,755:INFO:Initializing load_model()
2025-05-29 11:23:58,755:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,800:INFO:Initializing load_model()
2025-05-29 11:23:58,800:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,839:INFO:Initializing load_model()
2025-05-29 11:23:58,839:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,873:INFO:Initializing load_model()
2025-05-29 11:23:58,873:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,917:INFO:Initializing load_model()
2025-05-29 11:23:58,917:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,955:INFO:Initializing load_model()
2025-05-29 11:23:58,955:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:58,991:INFO:Initializing load_model()
2025-05-29 11:23:58,991:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:59,028:INFO:Initializing load_model()
2025-05-29 11:23:59,028:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:59,058:INFO:Initializing load_model()
2025-05-29 11:23:59,058:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:59,101:INFO:Initializing load_model()
2025-05-29 11:23:59,102:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:23:59,138:INFO:Initializing load_model()
2025-05-29 11:23:59,139:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:29:40,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:29:40,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:29:40,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:29:40,470:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:34:56,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:34:56,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:34:56,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:34:56,560:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:35:15,314:INFO:Initializing load_model()
2025-05-29 11:35:15,314:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:15,467:INFO:Initializing load_model()
2025-05-29 11:35:15,467:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:15,522:INFO:Initializing load_model()
2025-05-29 11:35:15,522:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,231:INFO:Initializing load_model()
2025-05-29 11:35:16,231:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,272:INFO:Initializing load_model()
2025-05-29 11:35:16,272:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,319:INFO:Initializing load_model()
2025-05-29 11:35:16,319:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,355:INFO:Initializing load_model()
2025-05-29 11:35:16,355:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,402:INFO:Initializing load_model()
2025-05-29 11:35:16,402:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,453:INFO:Initializing load_model()
2025-05-29 11:35:16,453:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,497:INFO:Initializing load_model()
2025-05-29 11:35:16,497:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,535:INFO:Initializing load_model()
2025-05-29 11:35:16,535:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,559:INFO:Initializing load_model()
2025-05-29 11:35:16,559:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,611:INFO:Initializing load_model()
2025-05-29 11:35:16,611:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,652:INFO:Initializing load_model()
2025-05-29 11:35:16,652:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:35:16,693:INFO:Initializing load_model()
2025-05-29 11:35:16,693:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:27,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:45:27,748:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:45:27,749:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:45:27,749:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 11:45:52,072:INFO:Initializing load_model()
2025-05-29 11:45:52,072:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:52,212:INFO:Initializing load_model()
2025-05-29 11:45:52,212:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:52,288:INFO:Initializing predict_model()
2025-05-29 11:45:52,288:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDDE3D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C796C27740>)
2025-05-29 11:45:52,288:INFO:Checking exceptions
2025-05-29 11:45:52,288:INFO:Preloading libraries
2025-05-29 11:45:52,288:INFO:Set up data.
2025-05-29 11:45:52,338:INFO:Set up index.
2025-05-29 11:45:52,543:INFO:Initializing load_model()
2025-05-29 11:45:52,543:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:53,234:INFO:Initializing load_model()
2025-05-29 11:45:53,234:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:53,270:INFO:Initializing load_model()
2025-05-29 11:45:53,270:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:53,319:INFO:Initializing predict_model()
2025-05-29 11:45:53,319:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C027FD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:53,320:INFO:Checking exceptions
2025-05-29 11:45:53,320:INFO:Preloading libraries
2025-05-29 11:45:53,320:INFO:Set up data.
2025-05-29 11:45:53,349:INFO:Set up index.
2025-05-29 11:45:53,513:INFO:Initializing load_model()
2025-05-29 11:45:53,513:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:53,558:INFO:Initializing predict_model()
2025-05-29 11:45:53,558:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE93F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7969F0400>)
2025-05-29 11:45:53,558:INFO:Checking exceptions
2025-05-29 11:45:53,558:INFO:Preloading libraries
2025-05-29 11:45:53,558:INFO:Set up data.
2025-05-29 11:45:53,574:INFO:Set up index.
2025-05-29 11:45:53,735:INFO:Initializing load_model()
2025-05-29 11:45:53,735:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:53,778:INFO:Initializing predict_model()
2025-05-29 11:45:53,778:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C027E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:53,778:INFO:Checking exceptions
2025-05-29 11:45:53,778:INFO:Preloading libraries
2025-05-29 11:45:53,778:INFO:Set up data.
2025-05-29 11:45:53,811:INFO:Set up index.
2025-05-29 11:45:53,964:INFO:Initializing load_model()
2025-05-29 11:45:53,966:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:54,015:INFO:Initializing predict_model()
2025-05-29 11:45:54,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C0270210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7969F0400>)
2025-05-29 11:45:54,015:INFO:Checking exceptions
2025-05-29 11:45:54,015:INFO:Preloading libraries
2025-05-29 11:45:54,015:INFO:Set up data.
2025-05-29 11:45:54,036:INFO:Set up index.
2025-05-29 11:45:54,198:INFO:Initializing load_model()
2025-05-29 11:45:54,198:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:54,250:INFO:Initializing predict_model()
2025-05-29 11:45:54,250:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C0254A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:54,250:INFO:Checking exceptions
2025-05-29 11:45:54,251:INFO:Preloading libraries
2025-05-29 11:45:54,251:INFO:Set up data.
2025-05-29 11:45:54,272:INFO:Set up index.
2025-05-29 11:45:54,418:INFO:Initializing load_model()
2025-05-29 11:45:54,418:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:54,479:INFO:Initializing predict_model()
2025-05-29 11:45:54,479:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BC34D610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BDDEAB60>)
2025-05-29 11:45:54,479:INFO:Checking exceptions
2025-05-29 11:45:54,480:INFO:Preloading libraries
2025-05-29 11:45:54,480:INFO:Set up data.
2025-05-29 11:45:54,503:INFO:Set up index.
2025-05-29 11:45:54,660:INFO:Initializing load_model()
2025-05-29 11:45:54,661:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:54,711:INFO:Initializing predict_model()
2025-05-29 11:45:54,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C027F6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:54,711:INFO:Checking exceptions
2025-05-29 11:45:54,711:INFO:Preloading libraries
2025-05-29 11:45:54,711:INFO:Set up data.
2025-05-29 11:45:54,735:INFO:Set up index.
2025-05-29 11:45:54,895:INFO:Initializing load_model()
2025-05-29 11:45:54,895:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:54,937:INFO:Initializing predict_model()
2025-05-29 11:45:54,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C028E5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BDDEAC00>)
2025-05-29 11:45:54,937:INFO:Checking exceptions
2025-05-29 11:45:54,937:INFO:Preloading libraries
2025-05-29 11:45:54,937:INFO:Set up data.
2025-05-29 11:45:54,964:INFO:Set up index.
2025-05-29 11:45:55,121:INFO:Initializing load_model()
2025-05-29 11:45:55,121:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:55,179:INFO:Initializing predict_model()
2025-05-29 11:45:55,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C02A2250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:55,179:INFO:Checking exceptions
2025-05-29 11:45:55,179:INFO:Preloading libraries
2025-05-29 11:45:55,180:INFO:Set up data.
2025-05-29 11:45:55,217:INFO:Set up index.
2025-05-29 11:45:55,387:INFO:Initializing load_model()
2025-05-29 11:45:55,387:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:55,438:INFO:Initializing predict_model()
2025-05-29 11:45:55,438:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C020F8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BDDEAC00>)
2025-05-29 11:45:55,438:INFO:Checking exceptions
2025-05-29 11:45:55,438:INFO:Preloading libraries
2025-05-29 11:45:55,441:INFO:Set up data.
2025-05-29 11:45:55,448:INFO:Set up index.
2025-05-29 11:45:55,620:INFO:Initializing load_model()
2025-05-29 11:45:55,620:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:55,679:INFO:Initializing predict_model()
2025-05-29 11:45:55,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C020EB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01C80E0>)
2025-05-29 11:45:55,679:INFO:Checking exceptions
2025-05-29 11:45:55,679:INFO:Preloading libraries
2025-05-29 11:45:55,679:INFO:Set up data.
2025-05-29 11:45:55,702:INFO:Set up index.
2025-05-29 11:45:55,874:INFO:Initializing load_model()
2025-05-29 11:45:55,874:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:55,920:INFO:Initializing predict_model()
2025-05-29 11:45:55,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE6BD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C023BC40>)
2025-05-29 11:45:55,920:INFO:Checking exceptions
2025-05-29 11:45:55,920:INFO:Preloading libraries
2025-05-29 11:45:55,921:INFO:Set up data.
2025-05-29 11:45:55,944:INFO:Set up index.
2025-05-29 11:45:57,378:INFO:Initializing load_model()
2025-05-29 11:45:57,379:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:57,409:INFO:Initializing load_model()
2025-05-29 11:45:57,409:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:57,441:INFO:Initializing predict_model()
2025-05-29 11:45:57,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C020EE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C027A200>)
2025-05-29 11:45:57,442:INFO:Checking exceptions
2025-05-29 11:45:57,442:INFO:Preloading libraries
2025-05-29 11:45:57,442:INFO:Set up data.
2025-05-29 11:45:57,471:INFO:Set up index.
2025-05-29 11:45:57,921:INFO:Initializing load_model()
2025-05-29 11:45:57,921:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:57,933:INFO:Initializing load_model()
2025-05-29 11:45:57,933:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:57,941:INFO:Initializing load_model()
2025-05-29 11:45:57,941:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:57,950:INFO:Initializing predict_model()
2025-05-29 11:45:57,950:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BC77A650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C027AA20>)
2025-05-29 11:45:57,950:INFO:Checking exceptions
2025-05-29 11:45:57,950:INFO:Preloading libraries
2025-05-29 11:45:57,950:INFO:Set up data.
2025-05-29 11:45:57,987:INFO:Set up index.
2025-05-29 11:45:58,164:INFO:Initializing load_model()
2025-05-29 11:45:58,164:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:58,184:INFO:Initializing predict_model()
2025-05-29 11:45:58,185:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C0255D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:58,185:INFO:Checking exceptions
2025-05-29 11:45:58,185:INFO:Preloading libraries
2025-05-29 11:45:58,185:INFO:Set up data.
2025-05-29 11:45:58,208:INFO:Set up index.
2025-05-29 11:45:58,366:INFO:Initializing load_model()
2025-05-29 11:45:58,366:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:58,372:INFO:Initializing predict_model()
2025-05-29 11:45:58,372:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BFEA50D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:58,372:INFO:Checking exceptions
2025-05-29 11:45:58,372:INFO:Preloading libraries
2025-05-29 11:45:58,372:INFO:Set up data.
2025-05-29 11:45:58,404:INFO:Set up index.
2025-05-29 11:45:58,571:INFO:Initializing load_model()
2025-05-29 11:45:58,571:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:58,590:INFO:Initializing predict_model()
2025-05-29 11:45:58,590:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BFEA7590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:58,590:INFO:Checking exceptions
2025-05-29 11:45:58,590:INFO:Preloading libraries
2025-05-29 11:45:58,590:INFO:Set up data.
2025-05-29 11:45:58,606:INFO:Set up index.
2025-05-29 11:45:58,805:INFO:Initializing load_model()
2025-05-29 11:45:58,805:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:58,832:INFO:Initializing predict_model()
2025-05-29 11:45:58,832:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C023CED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:58,832:INFO:Checking exceptions
2025-05-29 11:45:58,832:INFO:Preloading libraries
2025-05-29 11:45:58,832:INFO:Set up data.
2025-05-29 11:45:58,854:INFO:Set up index.
2025-05-29 11:45:59,013:INFO:Initializing load_model()
2025-05-29 11:45:59,013:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:59,033:INFO:Initializing predict_model()
2025-05-29 11:45:59,033:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C796926050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:59,033:INFO:Checking exceptions
2025-05-29 11:45:59,033:INFO:Preloading libraries
2025-05-29 11:45:59,033:INFO:Set up data.
2025-05-29 11:45:59,053:INFO:Set up index.
2025-05-29 11:45:59,232:INFO:Initializing load_model()
2025-05-29 11:45:59,232:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:59,252:INFO:Initializing predict_model()
2025-05-29 11:45:59,252:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BFEA7710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:59,252:INFO:Checking exceptions
2025-05-29 11:45:59,252:INFO:Preloading libraries
2025-05-29 11:45:59,252:INFO:Set up data.
2025-05-29 11:45:59,272:INFO:Set up index.
2025-05-29 11:45:59,417:INFO:Initializing load_model()
2025-05-29 11:45:59,417:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:59,433:INFO:Initializing predict_model()
2025-05-29 11:45:59,433:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C0225810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:59,433:INFO:Checking exceptions
2025-05-29 11:45:59,433:INFO:Preloading libraries
2025-05-29 11:45:59,433:INFO:Set up data.
2025-05-29 11:45:59,448:INFO:Set up index.
2025-05-29 11:45:59,652:INFO:Initializing load_model()
2025-05-29 11:45:59,652:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:59,667:INFO:Initializing predict_model()
2025-05-29 11:45:59,667:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BCC5B750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:59,667:INFO:Checking exceptions
2025-05-29 11:45:59,667:INFO:Preloading libraries
2025-05-29 11:45:59,667:INFO:Set up data.
2025-05-29 11:45:59,698:INFO:Set up index.
2025-05-29 11:45:59,870:INFO:Initializing load_model()
2025-05-29 11:45:59,870:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:45:59,886:INFO:Initializing predict_model()
2025-05-29 11:45:59,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C02719D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:45:59,886:INFO:Checking exceptions
2025-05-29 11:45:59,886:INFO:Preloading libraries
2025-05-29 11:45:59,886:INFO:Set up data.
2025-05-29 11:45:59,903:INFO:Set up index.
2025-05-29 11:46:00,121:INFO:Initializing load_model()
2025-05-29 11:46:00,121:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:00,156:INFO:Initializing predict_model()
2025-05-29 11:46:00,161:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BC727E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C01F7380>)
2025-05-29 11:46:00,161:INFO:Checking exceptions
2025-05-29 11:46:00,161:INFO:Preloading libraries
2025-05-29 11:46:00,161:INFO:Set up data.
2025-05-29 11:46:00,215:INFO:Set up index.
2025-05-29 11:46:00,386:INFO:Initializing load_model()
2025-05-29 11:46:00,386:INFO:load_model(model_name=models\top_model_1_KNeighborsRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:00,417:INFO:Initializing predict_model()
2025-05-29 11:46:00,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BFEBAF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 KNeighborsRegressor(metric='manhattan', n_jobs=-1,
                                     n_neighbors=13, weights='distance'))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C023B600>)
2025-05-29 11:46:00,417:INFO:Checking exceptions
2025-05-29 11:46:00,417:INFO:Preloading libraries
2025-05-29 11:46:00,417:INFO:Set up data.
2025-05-29 11:46:00,443:INFO:Set up index.
2025-05-29 11:46:01,508:INFO:Initializing load_model()
2025-05-29 11:46:01,508:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,531:INFO:Initializing load_model()
2025-05-29 11:46:01,531:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,554:INFO:Initializing predict_model()
2025-05-29 11:46:01,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BCD5BB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BDDF9F80>)
2025-05-29 11:46:01,556:INFO:Checking exceptions
2025-05-29 11:46:01,556:INFO:Preloading libraries
2025-05-29 11:46:01,556:INFO:Set up data.
2025-05-29 11:46:01,580:INFO:Set up index.
2025-05-29 11:46:01,732:INFO:Initializing load_model()
2025-05-29 11:46:01,732:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,742:INFO:Initializing load_model()
2025-05-29 11:46:01,743:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,755:INFO:Initializing load_model()
2025-05-29 11:46:01,755:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,771:INFO:Initializing predict_model()
2025-05-29 11:46:01,771:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE8DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BC8F1440>)
2025-05-29 11:46:01,771:INFO:Checking exceptions
2025-05-29 11:46:01,771:INFO:Preloading libraries
2025-05-29 11:46:01,771:INFO:Set up data.
2025-05-29 11:46:01,788:INFO:Set up index.
2025-05-29 11:46:01,919:INFO:Initializing load_model()
2025-05-29 11:46:01,919:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:01,952:INFO:Initializing predict_model()
2025-05-29 11:46:01,952:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE90350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7BC8F11C0>)
2025-05-29 11:46:01,952:INFO:Checking exceptions
2025-05-29 11:46:01,953:INFO:Preloading libraries
2025-05-29 11:46:01,953:INFO:Set up data.
2025-05-29 11:46:01,975:INFO:Set up index.
2025-05-29 11:46:02,105:INFO:Initializing load_model()
2025-05-29 11:46:02,105:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,126:INFO:Initializing predict_model()
2025-05-29 11:46:02,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7A89F05D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7A9502340>)
2025-05-29 11:46:02,126:INFO:Checking exceptions
2025-05-29 11:46:02,126:INFO:Preloading libraries
2025-05-29 11:46:02,126:INFO:Set up data.
2025-05-29 11:46:02,146:INFO:Set up index.
2025-05-29 11:46:02,277:INFO:Initializing load_model()
2025-05-29 11:46:02,277:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,294:INFO:Initializing predict_model()
2025-05-29 11:46:02,294:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BC784710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7953244A0>)
2025-05-29 11:46:02,294:INFO:Checking exceptions
2025-05-29 11:46:02,294:INFO:Preloading libraries
2025-05-29 11:46:02,294:INFO:Set up data.
2025-05-29 11:46:02,310:INFO:Set up index.
2025-05-29 11:46:02,447:INFO:Initializing load_model()
2025-05-29 11:46:02,447:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,466:INFO:Initializing predict_model()
2025-05-29 11:46:02,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BCD6C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7A9502340>)
2025-05-29 11:46:02,466:INFO:Checking exceptions
2025-05-29 11:46:02,466:INFO:Preloading libraries
2025-05-29 11:46:02,466:INFO:Set up data.
2025-05-29 11:46:02,482:INFO:Set up index.
2025-05-29 11:46:02,614:INFO:Initializing load_model()
2025-05-29 11:46:02,614:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,622:INFO:Initializing predict_model()
2025-05-29 11:46:02,622:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BCD640D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7953244A0>)
2025-05-29 11:46:02,622:INFO:Checking exceptions
2025-05-29 11:46:02,622:INFO:Preloading libraries
2025-05-29 11:46:02,622:INFO:Set up data.
2025-05-29 11:46:02,654:INFO:Set up index.
2025-05-29 11:46:02,783:INFO:Initializing load_model()
2025-05-29 11:46:02,783:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,804:INFO:Initializing predict_model()
2025-05-29 11:46:02,804:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C0224E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7A9502340>)
2025-05-29 11:46:02,804:INFO:Checking exceptions
2025-05-29 11:46:02,804:INFO:Preloading libraries
2025-05-29 11:46:02,804:INFO:Set up data.
2025-05-29 11:46:02,827:INFO:Set up index.
2025-05-29 11:46:02,948:INFO:Initializing load_model()
2025-05-29 11:46:02,948:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:02,971:INFO:Initializing predict_model()
2025-05-29 11:46:02,971:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE7B810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7953244A0>)
2025-05-29 11:46:02,971:INFO:Checking exceptions
2025-05-29 11:46:02,971:INFO:Preloading libraries
2025-05-29 11:46:02,971:INFO:Set up data.
2025-05-29 11:46:02,995:INFO:Set up index.
2025-05-29 11:46:03,122:INFO:Initializing load_model()
2025-05-29 11:46:03,122:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:03,148:INFO:Initializing predict_model()
2025-05-29 11:46:03,148:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C795F44C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7A9502340>)
2025-05-29 11:46:03,148:INFO:Checking exceptions
2025-05-29 11:46:03,148:INFO:Preloading libraries
2025-05-29 11:46:03,148:INFO:Set up data.
2025-05-29 11:46:03,172:INFO:Set up index.
2025-05-29 11:46:03,298:INFO:Initializing load_model()
2025-05-29 11:46:03,298:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:03,318:INFO:Initializing predict_model()
2025-05-29 11:46:03,318:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7C023D990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7953244A0>)
2025-05-29 11:46:03,318:INFO:Checking exceptions
2025-05-29 11:46:03,318:INFO:Preloading libraries
2025-05-29 11:46:03,319:INFO:Set up data.
2025-05-29 11:46:03,339:INFO:Set up index.
2025-05-29 11:46:03,469:INFO:Initializing load_model()
2025-05-29 11:46:03,469:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:03,493:INFO:Initializing predict_model()
2025-05-29 11:46:03,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BDE8C710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7A9502340>)
2025-05-29 11:46:03,493:INFO:Checking exceptions
2025-05-29 11:46:03,493:INFO:Preloading libraries
2025-05-29 11:46:03,493:INFO:Set up data.
2025-05-29 11:46:03,511:INFO:Set up index.
2025-05-29 11:46:03,661:INFO:Initializing load_model()
2025-05-29 11:46:03,661:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-29 11:46:03,678:INFO:Initializing predict_model()
2025-05-29 11:46:03,678:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001C7BC9A2A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C7C027A7A0>)
2025-05-29 11:46:03,678:INFO:Checking exceptions
2025-05-29 11:46:03,678:INFO:Preloading libraries
2025-05-29 11:46:03,678:INFO:Set up data.
2025-05-29 11:46:03,702:INFO:Set up index.
2025-05-29 13:07:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:07:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:07:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:07:57,464:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:21:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:21:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:21:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:21:23,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:21:40,145:INFO:Initializing load_model()
2025-05-29 13:21:40,145:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:40,297:INFO:Initializing load_model()
2025-05-29 13:21:40,297:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:40,355:INFO:Initializing predict_model()
2025-05-29 13:21:40,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EF4F810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021708B0C540>)
2025-05-29 13:21:40,355:INFO:Checking exceptions
2025-05-29 13:21:40,355:INFO:Preloading libraries
2025-05-29 13:21:40,356:INFO:Set up data.
2025-05-29 13:21:40,398:INFO:Set up index.
2025-05-29 13:21:40,566:INFO:Initializing load_model()
2025-05-29 13:21:40,567:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:41,246:INFO:Initializing load_model()
2025-05-29 13:21:41,246:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:41,288:INFO:Initializing load_model()
2025-05-29 13:21:41,288:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:41,342:INFO:Initializing predict_model()
2025-05-29 13:21:41,342:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323B3D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EFBB240>)
2025-05-29 13:21:41,342:INFO:Checking exceptions
2025-05-29 13:21:41,342:INFO:Preloading libraries
2025-05-29 13:21:41,343:INFO:Set up data.
2025-05-29 13:21:41,372:INFO:Set up index.
2025-05-29 13:21:41,545:INFO:Initializing load_model()
2025-05-29 13:21:41,545:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:41,589:INFO:Initializing predict_model()
2025-05-29 13:21:41,589:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732376CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021732327880>)
2025-05-29 13:21:41,589:INFO:Checking exceptions
2025-05-29 13:21:41,590:INFO:Preloading libraries
2025-05-29 13:21:41,590:INFO:Set up data.
2025-05-29 13:21:41,606:INFO:Set up index.
2025-05-29 13:21:41,776:INFO:Initializing load_model()
2025-05-29 13:21:41,776:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:41,831:INFO:Initializing predict_model()
2025-05-29 13:21:41,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323C5E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021732327BA0>)
2025-05-29 13:21:41,831:INFO:Checking exceptions
2025-05-29 13:21:41,831:INFO:Preloading libraries
2025-05-29 13:21:41,831:INFO:Set up data.
2025-05-29 13:21:41,859:INFO:Set up index.
2025-05-29 13:21:42,013:INFO:Initializing load_model()
2025-05-29 13:21:42,013:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:42,065:INFO:Initializing predict_model()
2025-05-29 13:21:42,065:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732350690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021708AE3F60>)
2025-05-29 13:21:42,065:INFO:Checking exceptions
2025-05-29 13:21:42,065:INFO:Preloading libraries
2025-05-29 13:21:42,067:INFO:Set up data.
2025-05-29 13:21:42,088:INFO:Set up index.
2025-05-29 13:21:42,245:INFO:Initializing load_model()
2025-05-29 13:21:42,245:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:42,291:INFO:Initializing predict_model()
2025-05-29 13:21:42,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217322FD210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EFBB560>)
2025-05-29 13:21:42,292:INFO:Checking exceptions
2025-05-29 13:21:42,292:INFO:Preloading libraries
2025-05-29 13:21:42,292:INFO:Set up data.
2025-05-29 13:21:42,315:INFO:Set up index.
2025-05-29 13:21:42,467:INFO:Initializing load_model()
2025-05-29 13:21:42,469:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:42,517:INFO:Initializing predict_model()
2025-05-29 13:21:42,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323BBC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021708AE3F60>)
2025-05-29 13:21:42,517:INFO:Checking exceptions
2025-05-29 13:21:42,517:INFO:Preloading libraries
2025-05-29 13:21:42,517:INFO:Set up data.
2025-05-29 13:21:42,542:INFO:Set up index.
2025-05-29 13:21:42,702:INFO:Initializing load_model()
2025-05-29 13:21:42,702:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:42,746:INFO:Initializing predict_model()
2025-05-29 13:21:42,746:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732366E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021732327CE0>)
2025-05-29 13:21:42,746:INFO:Checking exceptions
2025-05-29 13:21:42,746:INFO:Preloading libraries
2025-05-29 13:21:42,746:INFO:Set up data.
2025-05-29 13:21:42,768:INFO:Set up index.
2025-05-29 13:21:42,934:INFO:Initializing load_model()
2025-05-29 13:21:42,934:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:42,982:INFO:Initializing predict_model()
2025-05-29 13:21:42,982:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EA9B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EF7E7A0>)
2025-05-29 13:21:42,982:INFO:Checking exceptions
2025-05-29 13:21:42,982:INFO:Preloading libraries
2025-05-29 13:21:42,982:INFO:Set up data.
2025-05-29 13:21:43,013:INFO:Set up index.
2025-05-29 13:21:43,184:INFO:Initializing load_model()
2025-05-29 13:21:43,184:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:43,231:INFO:Initializing predict_model()
2025-05-29 13:21:43,231:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732354E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021708AE3F60>)
2025-05-29 13:21:43,231:INFO:Checking exceptions
2025-05-29 13:21:43,231:INFO:Preloading libraries
2025-05-29 13:21:43,231:INFO:Set up data.
2025-05-29 13:21:43,265:INFO:Set up index.
2025-05-29 13:21:43,417:INFO:Initializing load_model()
2025-05-29 13:21:43,417:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:43,480:INFO:Initializing predict_model()
2025-05-29 13:21:43,480:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EFE5250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EF2F100>)
2025-05-29 13:21:43,480:INFO:Checking exceptions
2025-05-29 13:21:43,480:INFO:Preloading libraries
2025-05-29 13:21:43,480:INFO:Set up data.
2025-05-29 13:21:43,506:INFO:Set up index.
2025-05-29 13:21:43,668:INFO:Initializing load_model()
2025-05-29 13:21:43,668:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:43,715:INFO:Initializing predict_model()
2025-05-29 13:21:43,715:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323B1350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021708AE3F60>)
2025-05-29 13:21:43,715:INFO:Checking exceptions
2025-05-29 13:21:43,715:INFO:Preloading libraries
2025-05-29 13:21:43,716:INFO:Set up data.
2025-05-29 13:21:43,739:INFO:Set up index.
2025-05-29 13:21:43,915:INFO:Initializing load_model()
2025-05-29 13:21:43,915:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:43,949:INFO:Initializing predict_model()
2025-05-29 13:21:43,949:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021731FDFA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000217323D77E0>)
2025-05-29 13:21:43,949:INFO:Checking exceptions
2025-05-29 13:21:43,949:INFO:Preloading libraries
2025-05-29 13:21:43,949:INFO:Set up data.
2025-05-29 13:21:43,981:INFO:Set up index.
2025-05-29 13:21:54,171:INFO:Initializing load_model()
2025-05-29 13:21:54,171:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:54,223:INFO:Initializing load_model()
2025-05-29 13:21:54,223:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:54,270:INFO:Initializing predict_model()
2025-05-29 13:21:54,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EEFAFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EF2F100>)
2025-05-29 13:21:54,270:INFO:Checking exceptions
2025-05-29 13:21:54,270:INFO:Preloading libraries
2025-05-29 13:21:54,270:INFO:Set up data.
2025-05-29 13:21:54,293:INFO:Set up index.
2025-05-29 13:21:54,479:INFO:Initializing load_model()
2025-05-29 13:21:54,479:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,121:INFO:Initializing load_model()
2025-05-29 13:21:55,121:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,166:INFO:Initializing load_model()
2025-05-29 13:21:55,166:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,220:INFO:Initializing predict_model()
2025-05-29 13:21:55,221:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732352950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172E024A40>)
2025-05-29 13:21:55,221:INFO:Checking exceptions
2025-05-29 13:21:55,221:INFO:Preloading libraries
2025-05-29 13:21:55,221:INFO:Set up data.
2025-05-29 13:21:55,243:INFO:Set up index.
2025-05-29 13:21:55,402:INFO:Initializing load_model()
2025-05-29 13:21:55,402:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,466:INFO:Initializing predict_model()
2025-05-29 13:21:55,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021731FD1DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EFAF240>)
2025-05-29 13:21:55,466:INFO:Checking exceptions
2025-05-29 13:21:55,466:INFO:Preloading libraries
2025-05-29 13:21:55,466:INFO:Set up data.
2025-05-29 13:21:55,479:INFO:Set up index.
2025-05-29 13:21:55,699:INFO:Initializing load_model()
2025-05-29 13:21:55,699:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,747:INFO:Initializing predict_model()
2025-05-29 13:21:55,747:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323E57D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172E024A40>)
2025-05-29 13:21:55,747:INFO:Checking exceptions
2025-05-29 13:21:55,747:INFO:Preloading libraries
2025-05-29 13:21:55,747:INFO:Set up data.
2025-05-29 13:21:55,778:INFO:Set up index.
2025-05-29 13:21:55,933:INFO:Initializing load_model()
2025-05-29 13:21:55,933:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:55,985:INFO:Initializing predict_model()
2025-05-29 13:21:55,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323825D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000217323CDC60>)
2025-05-29 13:21:55,985:INFO:Checking exceptions
2025-05-29 13:21:55,986:INFO:Preloading libraries
2025-05-29 13:21:55,986:INFO:Set up data.
2025-05-29 13:21:56,008:INFO:Set up index.
2025-05-29 13:21:56,167:INFO:Initializing load_model()
2025-05-29 13:21:56,167:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:56,359:INFO:Initializing predict_model()
2025-05-29 13:21:56,359:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172ED0E150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172E024A40>)
2025-05-29 13:21:56,359:INFO:Checking exceptions
2025-05-29 13:21:56,359:INFO:Preloading libraries
2025-05-29 13:21:56,359:INFO:Set up data.
2025-05-29 13:21:56,402:INFO:Set up index.
2025-05-29 13:21:56,615:INFO:Initializing load_model()
2025-05-29 13:21:56,615:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:56,652:INFO:Initializing predict_model()
2025-05-29 13:21:56,652:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EAA4150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172E024A40>)
2025-05-29 13:21:56,652:INFO:Checking exceptions
2025-05-29 13:21:56,652:INFO:Preloading libraries
2025-05-29 13:21:56,661:INFO:Set up data.
2025-05-29 13:21:56,689:INFO:Set up index.
2025-05-29 13:21:56,848:INFO:Initializing load_model()
2025-05-29 13:21:56,848:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:56,890:INFO:Initializing predict_model()
2025-05-29 13:21:56,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EE97050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002171B2F94E0>)
2025-05-29 13:21:56,890:INFO:Checking exceptions
2025-05-29 13:21:56,890:INFO:Preloading libraries
2025-05-29 13:21:56,890:INFO:Set up data.
2025-05-29 13:21:56,923:INFO:Set up index.
2025-05-29 13:21:57,078:INFO:Initializing load_model()
2025-05-29 13:21:57,078:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:57,123:INFO:Initializing predict_model()
2025-05-29 13:21:57,123:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732306F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021709C567A0>)
2025-05-29 13:21:57,123:INFO:Checking exceptions
2025-05-29 13:21:57,123:INFO:Preloading libraries
2025-05-29 13:21:57,123:INFO:Set up data.
2025-05-29 13:21:57,162:INFO:Set up index.
2025-05-29 13:21:57,320:INFO:Initializing load_model()
2025-05-29 13:21:57,320:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:57,357:INFO:Initializing predict_model()
2025-05-29 13:21:57,357:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021732381E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172E024A40>)
2025-05-29 13:21:57,357:INFO:Checking exceptions
2025-05-29 13:21:57,357:INFO:Preloading libraries
2025-05-29 13:21:57,357:INFO:Set up data.
2025-05-29 13:21:57,386:INFO:Set up index.
2025-05-29 13:21:57,547:INFO:Initializing load_model()
2025-05-29 13:21:57,547:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:57,593:INFO:Initializing predict_model()
2025-05-29 13:21:57,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002172EFE7250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002171B2F94E0>)
2025-05-29 13:21:57,594:INFO:Checking exceptions
2025-05-29 13:21:57,594:INFO:Preloading libraries
2025-05-29 13:21:57,594:INFO:Set up data.
2025-05-29 13:21:57,616:INFO:Set up index.
2025-05-29 13:21:57,781:INFO:Initializing load_model()
2025-05-29 13:21:57,781:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:57,827:INFO:Initializing predict_model()
2025-05-29 13:21:57,827:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323073D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021709C567A0>)
2025-05-29 13:21:57,827:INFO:Checking exceptions
2025-05-29 13:21:57,827:INFO:Preloading libraries
2025-05-29 13:21:57,828:INFO:Set up data.
2025-05-29 13:21:57,850:INFO:Set up index.
2025-05-29 13:21:58,053:INFO:Initializing load_model()
2025-05-29 13:21:58,053:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 13:21:58,092:INFO:Initializing predict_model()
2025-05-29 13:21:58,092:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000217323052D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002172EFB8E00>)
2025-05-29 13:21:58,092:INFO:Checking exceptions
2025-05-29 13:21:58,092:INFO:Preloading libraries
2025-05-29 13:21:58,092:INFO:Set up data.
2025-05-29 13:21:58,125:INFO:Set up index.
2025-05-29 13:31:12,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:31:12,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:31:12,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 13:31:12,184:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 15:53:04,124:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 15:53:04,124:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 15:53:04,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 15:53:04,125:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:07:28,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:07:28,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:07:28,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:07:28,903:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:08:32,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:08:32,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:08:32,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:08:32,316:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:11:34,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:11:35,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:11:35,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:11:35,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:22:30,933:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:22:30,934:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:22:30,934:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:22:30,934:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:27:12,714:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:27:12,714:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:27:12,714:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:27:12,714:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:30:25,827:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:30:25,827:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:30:25,827:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:30:25,827:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:31:03,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:31:03,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:31:03,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:31:03,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:32:30,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:32:30,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:32:30,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:32:30,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:43:37,235:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:43:37,236:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:43:37,236:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:43:37,236:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:15,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:15,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:15,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:15,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:55,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:55,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:55,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:46:55,011:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:48:38,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:48:38,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:48:38,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:48:38,074:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:55:21,059:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:55:21,075:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:55:21,075:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:55:21,075:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:58:29,792:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:58:29,792:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:58:29,792:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:58:29,792:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-29 16:58:47,108:INFO:Initializing load_model()
2025-05-29 16:58:47,108:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:47,262:INFO:Initializing load_model()
2025-05-29 16:58:47,262:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:47,328:INFO:Initializing predict_model()
2025-05-29 16:58:47,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D49A7D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D3491E40>)
2025-05-29 16:58:47,329:INFO:Checking exceptions
2025-05-29 16:58:47,329:INFO:Preloading libraries
2025-05-29 16:58:47,329:INFO:Set up data.
2025-05-29 16:58:47,367:INFO:Set up index.
2025-05-29 16:58:47,561:INFO:Initializing load_model()
2025-05-29 16:58:47,561:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:48,264:INFO:Initializing load_model()
2025-05-29 16:58:48,264:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:48,303:INFO:Initializing load_model()
2025-05-29 16:58:48,303:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:48,351:INFO:Initializing predict_model()
2025-05-29 16:58:48,351:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6E2BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D4A011C0>)
2025-05-29 16:58:48,351:INFO:Checking exceptions
2025-05-29 16:58:48,351:INFO:Preloading libraries
2025-05-29 16:58:48,351:INFO:Set up data.
2025-05-29 16:58:48,388:INFO:Set up index.
2025-05-29 16:58:48,566:INFO:Initializing load_model()
2025-05-29 16:58:48,566:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:48,612:INFO:Initializing predict_model()
2025-05-29 16:58:48,612:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232AD537910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D4A14180>)
2025-05-29 16:58:48,612:INFO:Checking exceptions
2025-05-29 16:58:48,612:INFO:Preloading libraries
2025-05-29 16:58:48,612:INFO:Set up data.
2025-05-29 16:58:48,632:INFO:Set up index.
2025-05-29 16:58:48,812:INFO:Initializing load_model()
2025-05-29 16:58:48,812:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:48,855:INFO:Initializing predict_model()
2025-05-29 16:58:48,855:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D34FDB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD558400>)
2025-05-29 16:58:48,855:INFO:Checking exceptions
2025-05-29 16:58:48,855:INFO:Preloading libraries
2025-05-29 16:58:48,855:INFO:Set up data.
2025-05-29 16:58:48,881:INFO:Set up index.
2025-05-29 16:58:49,057:INFO:Initializing load_model()
2025-05-29 16:58:49,057:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:49,106:INFO:Initializing predict_model()
2025-05-29 16:58:49,107:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6DEC2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D4A14180>)
2025-05-29 16:58:49,107:INFO:Checking exceptions
2025-05-29 16:58:49,107:INFO:Preloading libraries
2025-05-29 16:58:49,107:INFO:Set up data.
2025-05-29 16:58:49,131:INFO:Set up index.
2025-05-29 16:58:49,292:INFO:Initializing load_model()
2025-05-29 16:58:49,292:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:49,340:INFO:Initializing predict_model()
2025-05-29 16:58:49,341:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D3798510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD558400>)
2025-05-29 16:58:49,341:INFO:Checking exceptions
2025-05-29 16:58:49,341:INFO:Preloading libraries
2025-05-29 16:58:49,341:INFO:Set up data.
2025-05-29 16:58:49,400:INFO:Set up index.
2025-05-29 16:58:49,565:INFO:Initializing load_model()
2025-05-29 16:58:49,565:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:49,616:INFO:Initializing predict_model()
2025-05-29 16:58:49,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6D67C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD533F60>)
2025-05-29 16:58:49,616:INFO:Checking exceptions
2025-05-29 16:58:49,616:INFO:Preloading libraries
2025-05-29 16:58:49,616:INFO:Set up data.
2025-05-29 16:58:49,639:INFO:Set up index.
2025-05-29 16:58:49,797:INFO:Initializing load_model()
2025-05-29 16:58:49,797:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:49,850:INFO:Initializing predict_model()
2025-05-29 16:58:49,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232AE72C650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD558400>)
2025-05-29 16:58:49,850:INFO:Checking exceptions
2025-05-29 16:58:49,850:INFO:Preloading libraries
2025-05-29 16:58:49,850:INFO:Set up data.
2025-05-29 16:58:49,871:INFO:Set up index.
2025-05-29 16:58:50,028:INFO:Initializing load_model()
2025-05-29 16:58:50,028:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:50,069:INFO:Initializing predict_model()
2025-05-29 16:58:50,069:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D4A3BA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD533F60>)
2025-05-29 16:58:50,069:INFO:Checking exceptions
2025-05-29 16:58:50,069:INFO:Preloading libraries
2025-05-29 16:58:50,069:INFO:Set up data.
2025-05-29 16:58:50,106:INFO:Set up index.
2025-05-29 16:58:50,264:INFO:Initializing load_model()
2025-05-29 16:58:50,264:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:50,310:INFO:Initializing predict_model()
2025-05-29 16:58:50,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6E2BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD558400>)
2025-05-29 16:58:50,311:INFO:Checking exceptions
2025-05-29 16:58:50,311:INFO:Preloading libraries
2025-05-29 16:58:50,311:INFO:Set up data.
2025-05-29 16:58:50,320:INFO:Set up index.
2025-05-29 16:58:50,488:INFO:Initializing load_model()
2025-05-29 16:58:50,488:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:50,540:INFO:Initializing predict_model()
2025-05-29 16:58:50,540:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6E49B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D49EBB00>)
2025-05-29 16:58:50,540:INFO:Checking exceptions
2025-05-29 16:58:50,540:INFO:Preloading libraries
2025-05-29 16:58:50,540:INFO:Set up data.
2025-05-29 16:58:50,561:INFO:Set up index.
2025-05-29 16:58:50,722:INFO:Initializing load_model()
2025-05-29 16:58:50,722:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:50,770:INFO:Initializing predict_model()
2025-05-29 16:58:50,770:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D3522350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232AD533F60>)
2025-05-29 16:58:50,770:INFO:Checking exceptions
2025-05-29 16:58:50,770:INFO:Preloading libraries
2025-05-29 16:58:50,771:INFO:Set up data.
2025-05-29 16:58:50,782:INFO:Set up index.
2025-05-29 16:58:50,968:INFO:Initializing load_model()
2025-05-29 16:58:50,969:INFO:load_model(model_name=models\top_model_3_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-05-29 16:58:51,000:INFO:Initializing predict_model()
2025-05-29 16:58:51,000:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000232D6A67C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'people_prf_personnel_changes'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['external_eef_i...
                                             'external_eef_organisation_type',
                                             'project_prf_application_type'],
                                    transformer=OneHotEncoder(cols=['external_eef_industry_sector',
                                                                    'external_eef_organisation_type',
                                                                    'project_prf_application_type'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000232D6E40680>)
2025-05-29 16:58:51,000:INFO:Checking exceptions
2025-05-29 16:58:51,000:INFO:Preloading libraries
2025-05-29 16:58:51,000:INFO:Set up data.
2025-05-29 16:58:51,040:INFO:Set up index.
2025-05-30 12:56:37,305:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 12:56:37,306:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 12:56:37,306:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 12:56:37,306:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 12:57:38,662:INFO:Initializing load_model()
2025-05-30 12:57:38,662:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:38,820:INFO:Initializing load_model()
2025-05-30 12:57:38,820:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:38,913:INFO:Initializing predict_model()
2025-05-30 12:57:38,915:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE03C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEDDAD40>)
2025-05-30 12:57:38,915:INFO:Checking exceptions
2025-05-30 12:57:38,915:INFO:Preloading libraries
2025-05-30 12:57:38,915:INFO:Set up data.
2025-05-30 12:57:38,945:INFO:Set up index.
2025-05-30 12:57:38,960:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:39,112:INFO:Initializing load_model()
2025-05-30 12:57:39,112:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:39,968:INFO:Initializing load_model()
2025-05-30 12:57:39,970:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:40,014:INFO:Initializing load_model()
2025-05-30 12:57:40,014:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:40,084:INFO:Initializing predict_model()
2025-05-30 12:57:40,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF27F210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEDDAD40>)
2025-05-30 12:57:40,084:INFO:Checking exceptions
2025-05-30 12:57:40,084:INFO:Preloading libraries
2025-05-30 12:57:40,085:INFO:Set up data.
2025-05-30 12:57:40,111:INFO:Set up index.
2025-05-30 12:57:40,123:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:40,290:INFO:Initializing load_model()
2025-05-30 12:57:40,290:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:40,337:INFO:Initializing predict_model()
2025-05-30 12:57:40,337:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE92A150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE896A20>)
2025-05-30 12:57:40,337:INFO:Checking exceptions
2025-05-30 12:57:40,337:INFO:Preloading libraries
2025-05-30 12:57:40,337:INFO:Set up data.
2025-05-30 12:57:40,371:INFO:Set up index.
2025-05-30 12:57:40,381:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:40,527:INFO:Initializing load_model()
2025-05-30 12:57:40,527:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:40,580:INFO:Initializing predict_model()
2025-05-30 12:57:40,580:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9D8977490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE09DA0>)
2025-05-30 12:57:40,580:INFO:Checking exceptions
2025-05-30 12:57:40,580:INFO:Preloading libraries
2025-05-30 12:57:40,580:INFO:Set up data.
2025-05-30 12:57:40,604:INFO:Set up index.
2025-05-30 12:57:40,617:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:40,761:INFO:Initializing load_model()
2025-05-30 12:57:40,775:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:40,835:INFO:Initializing predict_model()
2025-05-30 12:57:40,835:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF2810D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE896A20>)
2025-05-30 12:57:40,835:INFO:Checking exceptions
2025-05-30 12:57:40,835:INFO:Preloading libraries
2025-05-30 12:57:40,835:INFO:Set up data.
2025-05-30 12:57:40,859:INFO:Set up index.
2025-05-30 12:57:40,870:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:41,027:INFO:Initializing load_model()
2025-05-30 12:57:41,027:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:41,090:INFO:Initializing predict_model()
2025-05-30 12:57:41,090:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE2EF310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE09DA0>)
2025-05-30 12:57:41,090:INFO:Checking exceptions
2025-05-30 12:57:41,090:INFO:Preloading libraries
2025-05-30 12:57:41,090:INFO:Set up data.
2025-05-30 12:57:41,113:INFO:Set up index.
2025-05-30 12:57:41,123:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:41,272:INFO:Initializing load_model()
2025-05-30 12:57:41,272:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:41,334:INFO:Initializing predict_model()
2025-05-30 12:57:41,334:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF25E910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE896A20>)
2025-05-30 12:57:41,334:INFO:Checking exceptions
2025-05-30 12:57:41,335:INFO:Preloading libraries
2025-05-30 12:57:41,335:INFO:Set up data.
2025-05-30 12:57:41,353:INFO:Set up index.
2025-05-30 12:57:41,368:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:41,513:INFO:Initializing load_model()
2025-05-30 12:57:41,513:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:41,570:INFO:Initializing predict_model()
2025-05-30 12:57:41,570:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FED507D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE09DA0>)
2025-05-30 12:57:41,570:INFO:Checking exceptions
2025-05-30 12:57:41,570:INFO:Preloading libraries
2025-05-30 12:57:41,570:INFO:Set up data.
2025-05-30 12:57:41,593:INFO:Set up index.
2025-05-30 12:57:41,605:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:41,746:INFO:Initializing load_model()
2025-05-30 12:57:41,746:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:41,802:INFO:Initializing predict_model()
2025-05-30 12:57:41,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE6E8CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE896A20>)
2025-05-30 12:57:41,803:INFO:Checking exceptions
2025-05-30 12:57:41,803:INFO:Preloading libraries
2025-05-30 12:57:41,803:INFO:Set up data.
2025-05-30 12:57:41,819:INFO:Set up index.
2025-05-30 12:57:41,836:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:41,994:INFO:Initializing load_model()
2025-05-30 12:57:41,994:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:42,063:INFO:Initializing predict_model()
2025-05-30 12:57:42,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF23D250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE09DA0>)
2025-05-30 12:57:42,063:INFO:Checking exceptions
2025-05-30 12:57:42,063:INFO:Preloading libraries
2025-05-30 12:57:42,063:INFO:Set up data.
2025-05-30 12:57:42,086:INFO:Set up index.
2025-05-30 12:57:42,095:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:42,226:INFO:Initializing load_model()
2025-05-30 12:57:42,226:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:42,295:INFO:Initializing predict_model()
2025-05-30 12:57:42,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF282590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE896A20>)
2025-05-30 12:57:42,296:INFO:Checking exceptions
2025-05-30 12:57:42,296:INFO:Preloading libraries
2025-05-30 12:57:42,296:INFO:Set up data.
2025-05-30 12:57:42,319:INFO:Set up index.
2025-05-30 12:57:42,319:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:42,461:INFO:Initializing load_model()
2025-05-30 12:57:42,461:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:42,522:INFO:Initializing predict_model()
2025-05-30 12:57:42,523:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF259150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE980220>)
2025-05-30 12:57:42,523:INFO:Checking exceptions
2025-05-30 12:57:42,523:INFO:Preloading libraries
2025-05-30 12:57:42,523:INFO:Set up data.
2025-05-30 12:57:42,539:INFO:Set up index.
2025-05-30 12:57:42,539:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:42,709:INFO:Initializing load_model()
2025-05-30 12:57:42,709:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:42,759:INFO:Initializing predict_model()
2025-05-30 12:57:42,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEDE3710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF28D260>)
2025-05-30 12:57:42,759:INFO:Checking exceptions
2025-05-30 12:57:42,759:INFO:Preloading libraries
2025-05-30 12:57:42,759:INFO:Set up data.
2025-05-30 12:57:42,781:INFO:Set up index.
2025-05-30 12:57:42,791:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:57:59,750:INFO:Initializing load_model()
2025-05-30 12:57:59,750:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:59,796:INFO:Initializing load_model()
2025-05-30 12:57:59,797:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:57:59,860:INFO:Initializing predict_model()
2025-05-30 12:57:59,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE6F4CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE9837E0>)
2025-05-30 12:57:59,861:INFO:Checking exceptions
2025-05-30 12:57:59,861:INFO:Preloading libraries
2025-05-30 12:57:59,862:INFO:Set up data.
2025-05-30 12:57:59,888:INFO:Set up index.
2025-05-30 12:57:59,900:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:00,087:INFO:Initializing load_model()
2025-05-30 12:58:00,087:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:00,795:INFO:Initializing load_model()
2025-05-30 12:58:00,795:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:00,835:INFO:Initializing load_model()
2025-05-30 12:58:00,835:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:00,890:INFO:Initializing predict_model()
2025-05-30 12:58:00,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE839D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF20EC00>)
2025-05-30 12:58:00,890:INFO:Checking exceptions
2025-05-30 12:58:00,890:INFO:Preloading libraries
2025-05-30 12:58:00,891:INFO:Set up data.
2025-05-30 12:58:00,915:INFO:Set up index.
2025-05-30 12:58:00,926:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:01,054:INFO:Initializing load_model()
2025-05-30 12:58:01,054:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:01,111:INFO:Initializing predict_model()
2025-05-30 12:58:01,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B983BF4650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE0AA20>)
2025-05-30 12:58:01,111:INFO:Checking exceptions
2025-05-30 12:58:01,111:INFO:Preloading libraries
2025-05-30 12:58:01,111:INFO:Set up data.
2025-05-30 12:58:01,133:INFO:Set up index.
2025-05-30 12:58:01,149:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:01,301:INFO:Initializing load_model()
2025-05-30 12:58:01,301:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:01,351:INFO:Initializing predict_model()
2025-05-30 12:58:01,351:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE92F910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEDF4C20>)
2025-05-30 12:58:01,351:INFO:Checking exceptions
2025-05-30 12:58:01,351:INFO:Preloading libraries
2025-05-30 12:58:01,351:INFO:Set up data.
2025-05-30 12:58:01,379:INFO:Set up index.
2025-05-30 12:58:01,390:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:01,539:INFO:Initializing load_model()
2025-05-30 12:58:01,539:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:01,603:INFO:Initializing predict_model()
2025-05-30 12:58:01,603:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B983C79F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF20EC00>)
2025-05-30 12:58:01,603:INFO:Checking exceptions
2025-05-30 12:58:01,603:INFO:Preloading libraries
2025-05-30 12:58:01,603:INFO:Set up data.
2025-05-30 12:58:01,619:INFO:Set up index.
2025-05-30 12:58:01,641:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:01,791:INFO:Initializing load_model()
2025-05-30 12:58:01,791:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:01,835:INFO:Initializing predict_model()
2025-05-30 12:58:01,835:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FE8FCF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE983920>)
2025-05-30 12:58:01,835:INFO:Checking exceptions
2025-05-30 12:58:01,835:INFO:Preloading libraries
2025-05-30 12:58:01,835:INFO:Set up data.
2025-05-30 12:58:01,866:INFO:Set up index.
2025-05-30 12:58:01,879:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:02,018:INFO:Initializing load_model()
2025-05-30 12:58:02,018:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:02,073:INFO:Initializing predict_model()
2025-05-30 12:58:02,074:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FF1D2410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEDF7B00>)
2025-05-30 12:58:02,074:INFO:Checking exceptions
2025-05-30 12:58:02,074:INFO:Preloading libraries
2025-05-30 12:58:02,074:INFO:Set up data.
2025-05-30 12:58:02,095:INFO:Set up index.
2025-05-30 12:58:02,101:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:02,247:INFO:Initializing load_model()
2025-05-30 12:58:02,247:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:02,298:INFO:Initializing predict_model()
2025-05-30 12:58:02,298:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE22C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF20D3A0>)
2025-05-30 12:58:02,298:INFO:Checking exceptions
2025-05-30 12:58:02,298:INFO:Preloading libraries
2025-05-30 12:58:02,298:INFO:Set up data.
2025-05-30 12:58:02,319:INFO:Set up index.
2025-05-30 12:58:02,320:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:02,473:INFO:Initializing load_model()
2025-05-30 12:58:02,473:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:02,523:INFO:Initializing predict_model()
2025-05-30 12:58:02,523:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE812D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEE0AA20>)
2025-05-30 12:58:02,523:INFO:Checking exceptions
2025-05-30 12:58:02,523:INFO:Preloading libraries
2025-05-30 12:58:02,523:INFO:Set up data.
2025-05-30 12:58:02,539:INFO:Set up index.
2025-05-30 12:58:02,553:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:02,695:INFO:Initializing load_model()
2025-05-30 12:58:02,695:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:02,742:INFO:Initializing predict_model()
2025-05-30 12:58:02,742:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FED40290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FEDF4C20>)
2025-05-30 12:58:02,742:INFO:Checking exceptions
2025-05-30 12:58:02,742:INFO:Preloading libraries
2025-05-30 12:58:02,742:INFO:Set up data.
2025-05-30 12:58:02,765:INFO:Set up index.
2025-05-30 12:58:02,774:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:02,914:INFO:Initializing load_model()
2025-05-30 12:58:02,914:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:02,964:INFO:Initializing predict_model()
2025-05-30 12:58:02,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE2F590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF20EC00>)
2025-05-30 12:58:02,964:INFO:Checking exceptions
2025-05-30 12:58:02,964:INFO:Preloading libraries
2025-05-30 12:58:02,964:INFO:Set up data.
2025-05-30 12:58:02,978:INFO:Set up index.
2025-05-30 12:58:02,993:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:03,144:INFO:Initializing load_model()
2025-05-30 12:58:03,144:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:03,195:INFO:Initializing predict_model()
2025-05-30 12:58:03,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B9FEE89090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FE983920>)
2025-05-30 12:58:03,195:INFO:Checking exceptions
2025-05-30 12:58:03,195:INFO:Preloading libraries
2025-05-30 12:58:03,195:INFO:Set up data.
2025-05-30 12:58:03,211:INFO:Set up index.
2025-05-30 12:58:03,232:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 12:58:03,384:INFO:Initializing load_model()
2025-05-30 12:58:03,384:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 12:58:03,429:INFO:Initializing predict_model()
2025-05-30 12:58:03,429:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002B983BC86D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002B9FF2882C0>)
2025-05-30 12:58:03,429:INFO:Checking exceptions
2025-05-30 12:58:03,429:INFO:Preloading libraries
2025-05-30 12:58:03,429:INFO:Set up data.
2025-05-30 12:58:03,456:INFO:Set up index.
2025-05-30 12:58:03,475:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:01:36,274:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:01:36,274:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:01:36,274:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:01:36,274:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:03:56,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:03:56,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:03:56,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:03:56,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-05-30 13:04:59,117:INFO:Initializing load_model()
2025-05-30 13:04:59,117:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:04:59,227:INFO:Initializing load_model()
2025-05-30 13:04:59,227:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:04:59,249:INFO:Initializing predict_model()
2025-05-30 13:04:59,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81817290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B81810720>)
2025-05-30 13:04:59,249:INFO:Checking exceptions
2025-05-30 13:04:59,249:INFO:Preloading libraries
2025-05-30 13:04:59,249:INFO:Set up data.
2025-05-30 13:04:59,270:INFO:Set up index.
2025-05-30 13:04:59,279:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:04:59,422:INFO:Initializing load_model()
2025-05-30 13:04:59,422:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:04:59,978:INFO:Initializing load_model()
2025-05-30 13:04:59,979:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:04:59,980:INFO:Initializing load_model()
2025-05-30 13:04:59,980:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,027:INFO:Initializing predict_model()
2025-05-30 13:05:00,027:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81853090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813B7B00>)
2025-05-30 13:05:00,027:INFO:Checking exceptions
2025-05-30 13:05:00,027:INFO:Preloading libraries
2025-05-30 13:05:00,028:INFO:Set up data.
2025-05-30 13:05:00,043:INFO:Set up index.
2025-05-30 13:05:00,054:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:00,180:INFO:Initializing load_model()
2025-05-30 13:05:00,180:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,207:INFO:Initializing predict_model()
2025-05-30 13:05:00,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81750FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B848AE520>)
2025-05-30 13:05:00,207:INFO:Checking exceptions
2025-05-30 13:05:00,207:INFO:Preloading libraries
2025-05-30 13:05:00,207:INFO:Set up data.
2025-05-30 13:05:00,227:INFO:Set up index.
2025-05-30 13:05:00,235:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:00,356:INFO:Initializing load_model()
2025-05-30 13:05:00,356:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,372:INFO:Initializing predict_model()
2025-05-30 13:05:00,372:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818CD890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813B7740>)
2025-05-30 13:05:00,372:INFO:Checking exceptions
2025-05-30 13:05:00,372:INFO:Preloading libraries
2025-05-30 13:05:00,372:INFO:Set up data.
2025-05-30 13:05:00,387:INFO:Set up index.
2025-05-30 13:05:00,405:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:00,523:INFO:Initializing load_model()
2025-05-30 13:05:00,523:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,560:INFO:Initializing predict_model()
2025-05-30 13:05:00,560:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81154C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818A5080>)
2025-05-30 13:05:00,560:INFO:Checking exceptions
2025-05-30 13:05:00,560:INFO:Preloading libraries
2025-05-30 13:05:00,562:INFO:Set up data.
2025-05-30 13:05:00,590:INFO:Set up index.
2025-05-30 13:05:00,595:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:00,711:INFO:Initializing load_model()
2025-05-30 13:05:00,711:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,741:INFO:Initializing predict_model()
2025-05-30 13:05:00,741:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81357F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813B7740>)
2025-05-30 13:05:00,741:INFO:Checking exceptions
2025-05-30 13:05:00,741:INFO:Preloading libraries
2025-05-30 13:05:00,741:INFO:Set up data.
2025-05-30 13:05:00,761:INFO:Set up index.
2025-05-30 13:05:00,761:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:00,892:INFO:Initializing load_model()
2025-05-30 13:05:00,892:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:00,916:INFO:Initializing predict_model()
2025-05-30 13:05:00,916:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B813A80D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818A5080>)
2025-05-30 13:05:00,916:INFO:Checking exceptions
2025-05-30 13:05:00,916:INFO:Preloading libraries
2025-05-30 13:05:00,916:INFO:Set up data.
2025-05-30 13:05:00,931:INFO:Set up index.
2025-05-30 13:05:00,938:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,048:INFO:Initializing load_model()
2025-05-30 13:05:01,048:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,072:INFO:Initializing predict_model()
2025-05-30 13:05:01,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818F8C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813B7740>)
2025-05-30 13:05:01,073:INFO:Checking exceptions
2025-05-30 13:05:01,073:INFO:Preloading libraries
2025-05-30 13:05:01,073:INFO:Set up data.
2025-05-30 13:05:01,091:INFO:Set up index.
2025-05-30 13:05:01,099:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,212:INFO:Initializing load_model()
2025-05-30 13:05:01,213:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,237:INFO:Initializing predict_model()
2025-05-30 13:05:01,237:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818D69D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818A5080>)
2025-05-30 13:05:01,237:INFO:Checking exceptions
2025-05-30 13:05:01,237:INFO:Preloading libraries
2025-05-30 13:05:01,237:INFO:Set up data.
2025-05-30 13:05:01,253:INFO:Set up index.
2025-05-30 13:05:01,262:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,371:INFO:Initializing load_model()
2025-05-30 13:05:01,371:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,390:INFO:Initializing predict_model()
2025-05-30 13:05:01,390:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B848FF390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813B7740>)
2025-05-30 13:05:01,390:INFO:Checking exceptions
2025-05-30 13:05:01,390:INFO:Preloading libraries
2025-05-30 13:05:01,390:INFO:Set up data.
2025-05-30 13:05:01,401:INFO:Set up index.
2025-05-30 13:05:01,420:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,530:INFO:Initializing load_model()
2025-05-30 13:05:01,530:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,546:INFO:Initializing predict_model()
2025-05-30 13:05:01,546:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B848E6950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818A5080>)
2025-05-30 13:05:01,546:INFO:Checking exceptions
2025-05-30 13:05:01,546:INFO:Preloading libraries
2025-05-30 13:05:01,546:INFO:Set up data.
2025-05-30 13:05:01,564:INFO:Set up index.
2025-05-30 13:05:01,569:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,686:INFO:Initializing load_model()
2025-05-30 13:05:01,687:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,700:INFO:Initializing predict_model()
2025-05-30 13:05:01,700:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81872350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:01,700:INFO:Checking exceptions
2025-05-30 13:05:01,700:INFO:Preloading libraries
2025-05-30 13:05:01,700:INFO:Set up data.
2025-05-30 13:05:01,723:INFO:Set up index.
2025-05-30 13:05:01,733:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:01,859:INFO:Initializing load_model()
2025-05-30 13:05:01,859:INFO:load_model(model_name=models\top_model_1_DecisionTreeRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:01,878:INFO:Initializing predict_model()
2025-05-30 13:05:01,878:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818E3810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B84905EE0>)
2025-05-30 13:05:01,878:INFO:Checking exceptions
2025-05-30 13:05:01,878:INFO:Preloading libraries
2025-05-30 13:05:01,878:INFO:Set up data.
2025-05-30 13:05:01,895:INFO:Set up index.
2025-05-30 13:05:01,906:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,094:INFO:Initializing load_model()
2025-05-30 13:05:09,095:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,106:INFO:Initializing load_model()
2025-05-30 13:05:09,107:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,140:INFO:Initializing predict_model()
2025-05-30 13:05:09,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B80D7CD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B848AD9E0>)
2025-05-30 13:05:09,141:INFO:Checking exceptions
2025-05-30 13:05:09,141:INFO:Preloading libraries
2025-05-30 13:05:09,141:INFO:Set up data.
2025-05-30 13:05:09,168:INFO:Set up index.
2025-05-30 13:05:09,177:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,307:INFO:Initializing load_model()
2025-05-30 13:05:09,307:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,320:INFO:Initializing load_model()
2025-05-30 13:05:09,320:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,330:INFO:Initializing load_model()
2025-05-30 13:05:09,330:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,360:INFO:Initializing predict_model()
2025-05-30 13:05:09,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818C2610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B848AFC40>)
2025-05-30 13:05:09,360:INFO:Checking exceptions
2025-05-30 13:05:09,361:INFO:Preloading libraries
2025-05-30 13:05:09,361:INFO:Set up data.
2025-05-30 13:05:09,378:INFO:Set up index.
2025-05-30 13:05:09,386:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,499:INFO:Initializing load_model()
2025-05-30 13:05:09,499:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,519:INFO:Initializing predict_model()
2025-05-30 13:05:09,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818E1690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:09,519:INFO:Checking exceptions
2025-05-30 13:05:09,519:INFO:Preloading libraries
2025-05-30 13:05:09,519:INFO:Set up data.
2025-05-30 13:05:09,534:INFO:Set up index.
2025-05-30 13:05:09,544:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,654:INFO:Initializing load_model()
2025-05-30 13:05:09,654:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,677:INFO:Initializing predict_model()
2025-05-30 13:05:09,677:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8111DFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:09,677:INFO:Checking exceptions
2025-05-30 13:05:09,677:INFO:Preloading libraries
2025-05-30 13:05:09,677:INFO:Set up data.
2025-05-30 13:05:09,692:INFO:Set up index.
2025-05-30 13:05:09,702:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,812:INFO:Initializing load_model()
2025-05-30 13:05:09,813:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,834:INFO:Initializing predict_model()
2025-05-30 13:05:09,834:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8180AA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BEDF05940>)
2025-05-30 13:05:09,834:INFO:Checking exceptions
2025-05-30 13:05:09,834:INFO:Preloading libraries
2025-05-30 13:05:09,834:INFO:Set up data.
2025-05-30 13:05:09,849:INFO:Set up index.
2025-05-30 13:05:09,859:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:09,964:INFO:Initializing load_model()
2025-05-30 13:05:09,965:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:09,979:INFO:Initializing predict_model()
2025-05-30 13:05:09,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8175AB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:09,979:INFO:Checking exceptions
2025-05-30 13:05:09,979:INFO:Preloading libraries
2025-05-30 13:05:09,979:INFO:Set up data.
2025-05-30 13:05:10,003:INFO:Set up index.
2025-05-30 13:05:10,012:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,118:INFO:Initializing load_model()
2025-05-30 13:05:10,118:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,141:INFO:Initializing predict_model()
2025-05-30 13:05:10,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016BDC9241D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BEDF05940>)
2025-05-30 13:05:10,141:INFO:Checking exceptions
2025-05-30 13:05:10,141:INFO:Preloading libraries
2025-05-30 13:05:10,141:INFO:Set up data.
2025-05-30 13:05:10,158:INFO:Set up index.
2025-05-30 13:05:10,168:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,272:INFO:Initializing load_model()
2025-05-30 13:05:10,272:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,296:INFO:Initializing predict_model()
2025-05-30 13:05:10,297:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8490D390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:10,297:INFO:Checking exceptions
2025-05-30 13:05:10,297:INFO:Preloading libraries
2025-05-30 13:05:10,297:INFO:Set up data.
2025-05-30 13:05:10,317:INFO:Set up index.
2025-05-30 13:05:10,322:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,430:INFO:Initializing load_model()
2025-05-30 13:05:10,430:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,453:INFO:Initializing predict_model()
2025-05-30 13:05:10,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818E3190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BEDF05940>)
2025-05-30 13:05:10,453:INFO:Checking exceptions
2025-05-30 13:05:10,454:INFO:Preloading libraries
2025-05-30 13:05:10,454:INFO:Set up data.
2025-05-30 13:05:10,455:INFO:Set up index.
2025-05-30 13:05:10,474:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,579:INFO:Initializing load_model()
2025-05-30 13:05:10,579:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,600:INFO:Initializing predict_model()
2025-05-30 13:05:10,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8490E610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:10,600:INFO:Checking exceptions
2025-05-30 13:05:10,600:INFO:Preloading libraries
2025-05-30 13:05:10,600:INFO:Set up data.
2025-05-30 13:05:10,617:INFO:Set up index.
2025-05-30 13:05:10,622:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,732:INFO:Initializing load_model()
2025-05-30 13:05:10,732:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,746:INFO:Initializing predict_model()
2025-05-30 13:05:10,746:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81165C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BEDF05940>)
2025-05-30 13:05:10,746:INFO:Checking exceptions
2025-05-30 13:05:10,746:INFO:Preloading libraries
2025-05-30 13:05:10,746:INFO:Set up data.
2025-05-30 13:05:10,766:INFO:Set up index.
2025-05-30 13:05:10,766:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:10,881:INFO:Initializing load_model()
2025-05-30 13:05:10,882:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:10,904:INFO:Initializing predict_model()
2025-05-30 13:05:10,904:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81845BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016BDB3C4400>)
2025-05-30 13:05:10,904:INFO:Checking exceptions
2025-05-30 13:05:10,904:INFO:Preloading libraries
2025-05-30 13:05:10,905:INFO:Set up data.
2025-05-30 13:05:10,919:INFO:Set up index.
2025-05-30 13:05:10,921:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:11,049:INFO:Initializing load_model()
2025-05-30 13:05:11,049:INFO:load_model(model_name=models\top_model_2_OrthogonalMatchingPursuit, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:11,067:INFO:Initializing predict_model()
2025-05-30 13:05:11,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8490DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                             'Project_PRF_Application_Type',
                                             'Tech_TF_Client_Roles'],
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model', OrthogonalMatchingPursuit())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8189CAE0>)
2025-05-30 13:05:11,067:INFO:Checking exceptions
2025-05-30 13:05:11,067:INFO:Preloading libraries
2025-05-30 13:05:11,067:INFO:Set up data.
2025-05-30 13:05:11,083:INFO:Set up index.
2025-05-30 13:05:11,090:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:17,439:INFO:Initializing load_model()
2025-05-30 13:05:17,439:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:17,478:INFO:Initializing load_model()
2025-05-30 13:05:17,478:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:17,533:INFO:Initializing predict_model()
2025-05-30 13:05:17,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B81172790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B813F8F40>)
2025-05-30 13:05:17,533:INFO:Checking exceptions
2025-05-30 13:05:17,533:INFO:Preloading libraries
2025-05-30 13:05:17,533:INFO:Set up data.
2025-05-30 13:05:17,552:INFO:Set up index.
2025-05-30 13:05:17,561:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:17,700:INFO:Initializing load_model()
2025-05-30 13:05:17,701:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,242:INFO:Initializing load_model()
2025-05-30 13:05:18,242:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,287:INFO:Initializing load_model()
2025-05-30 13:05:18,287:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,346:INFO:Initializing predict_model()
2025-05-30 13:05:18,346:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B848E7ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B81838220>)
2025-05-30 13:05:18,346:INFO:Checking exceptions
2025-05-30 13:05:18,346:INFO:Preloading libraries
2025-05-30 13:05:18,346:INFO:Set up data.
2025-05-30 13:05:18,364:INFO:Set up index.
2025-05-30 13:05:18,371:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:18,508:INFO:Initializing load_model()
2025-05-30 13:05:18,508:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,548:INFO:Initializing predict_model()
2025-05-30 13:05:18,548:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B84955350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818965C0>)
2025-05-30 13:05:18,548:INFO:Checking exceptions
2025-05-30 13:05:18,548:INFO:Preloading libraries
2025-05-30 13:05:18,548:INFO:Set up data.
2025-05-30 13:05:18,578:INFO:Set up index.
2025-05-30 13:05:18,578:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:18,707:INFO:Initializing load_model()
2025-05-30 13:05:18,707:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,744:INFO:Initializing predict_model()
2025-05-30 13:05:18,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B848B3450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8183B2E0>)
2025-05-30 13:05:18,744:INFO:Checking exceptions
2025-05-30 13:05:18,744:INFO:Preloading libraries
2025-05-30 13:05:18,744:INFO:Set up data.
2025-05-30 13:05:18,766:INFO:Set up index.
2025-05-30 13:05:18,766:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:18,889:INFO:Initializing load_model()
2025-05-30 13:05:18,889:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:18,939:INFO:Initializing predict_model()
2025-05-30 13:05:18,939:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8495DDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818965C0>)
2025-05-30 13:05:18,939:INFO:Checking exceptions
2025-05-30 13:05:18,939:INFO:Preloading libraries
2025-05-30 13:05:18,939:INFO:Set up data.
2025-05-30 13:05:18,956:INFO:Set up index.
2025-05-30 13:05:18,956:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:19,126:INFO:Initializing load_model()
2025-05-30 13:05:19,126:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:19,164:INFO:Initializing predict_model()
2025-05-30 13:05:19,164:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016BDB194550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8183B2E0>)
2025-05-30 13:05:19,164:INFO:Checking exceptions
2025-05-30 13:05:19,164:INFO:Preloading libraries
2025-05-30 13:05:19,165:INFO:Set up data.
2025-05-30 13:05:19,180:INFO:Set up index.
2025-05-30 13:05:19,188:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:19,304:INFO:Initializing load_model()
2025-05-30 13:05:19,304:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:19,342:INFO:Initializing predict_model()
2025-05-30 13:05:19,342:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818CCC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818965C0>)
2025-05-30 13:05:19,342:INFO:Checking exceptions
2025-05-30 13:05:19,342:INFO:Preloading libraries
2025-05-30 13:05:19,342:INFO:Set up data.
2025-05-30 13:05:19,359:INFO:Set up index.
2025-05-30 13:05:19,366:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:19,476:INFO:Initializing load_model()
2025-05-30 13:05:19,476:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:19,519:INFO:Initializing predict_model()
2025-05-30 13:05:19,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818C0BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8183B2E0>)
2025-05-30 13:05:19,519:INFO:Checking exceptions
2025-05-30 13:05:19,519:INFO:Preloading libraries
2025-05-30 13:05:19,519:INFO:Set up data.
2025-05-30 13:05:19,532:INFO:Set up index.
2025-05-30 13:05:19,546:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:19,664:INFO:Initializing load_model()
2025-05-30 13:05:19,664:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:19,703:INFO:Initializing predict_model()
2025-05-30 13:05:19,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B84901B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818965C0>)
2025-05-30 13:05:19,703:INFO:Checking exceptions
2025-05-30 13:05:19,703:INFO:Preloading libraries
2025-05-30 13:05:19,703:INFO:Set up data.
2025-05-30 13:05:19,719:INFO:Set up index.
2025-05-30 13:05:19,729:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:19,845:INFO:Initializing load_model()
2025-05-30 13:05:19,845:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:19,885:INFO:Initializing predict_model()
2025-05-30 13:05:19,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B848FF150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8183B2E0>)
2025-05-30 13:05:19,886:INFO:Checking exceptions
2025-05-30 13:05:19,886:INFO:Preloading libraries
2025-05-30 13:05:19,886:INFO:Set up data.
2025-05-30 13:05:19,890:INFO:Set up index.
2025-05-30 13:05:19,911:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:20,023:INFO:Initializing load_model()
2025-05-30 13:05:20,023:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:20,073:INFO:Initializing predict_model()
2025-05-30 13:05:20,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016BDC5B14D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B818965C0>)
2025-05-30 13:05:20,073:INFO:Checking exceptions
2025-05-30 13:05:20,073:INFO:Preloading libraries
2025-05-30 13:05:20,073:INFO:Set up data.
2025-05-30 13:05:20,080:INFO:Set up index.
2025-05-30 13:05:20,096:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:20,218:INFO:Initializing load_model()
2025-05-30 13:05:20,218:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:20,255:INFO:Initializing predict_model()
2025-05-30 13:05:20,255:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B8180BC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B8183B2E0>)
2025-05-30 13:05:20,256:INFO:Checking exceptions
2025-05-30 13:05:20,256:INFO:Preloading libraries
2025-05-30 13:05:20,256:INFO:Set up data.
2025-05-30 13:05:20,265:INFO:Set up index.
2025-05-30 13:05:20,265:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-05-30 13:05:20,413:INFO:Initializing load_model()
2025-05-30 13:05:20,413:INFO:load_model(model_name=models\top_model_3_AdaBoostRegressor, platform=None, authentication=None, verbose=True)
2025-05-30 13:05:20,452:INFO:Initializing predict_model()
2025-05-30 13:05:20,452:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000016B818FF2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['ISBSG_Project_ID',
                                             'Project_PRF_Year_of_Project',
                                             'Project_PRF_Functional_Size',
                                             'Project_PRF_Normalised_Work_Effort_Level_1',
                                             'Project_PRF_Normalised_Level_1_PDR_ufp',
                                             'Project_PRF_Normalised_PDR_ufp',
                                             'Project_PRF_Defect_Density',
                                             'Project_PRF_Speed_of_Deliver...
                                    transformer=OneHotEncoder(cols=['External_EEF_Industry_Sector',
                                                                    'External_EEF_Organisation_Type',
                                                                    'Project_PRF_Application_Type',
                                                                    'Tech_TF_Client_Roles'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('trained_model',
                 AdaBoostRegressor(learning_rate=1e-06, n_estimators=70,
                                   random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016B849056C0>)
2025-05-30 13:05:20,452:INFO:Checking exceptions
2025-05-30 13:05:20,452:INFO:Preloading libraries
2025-05-30 13:05:20,452:INFO:Set up data.
2025-05-30 13:05:20,453:INFO:Set up index.
2025-05-30 13:05:20,476:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['Tech_TF_Type_of_Server' 'Tech_TF_ClientServer_Description']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-06-05 12:04:47,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 12:04:47,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 12:04:47,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 12:04:47,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 12:04:55,058:INFO:Initializing load_model()
2025-06-05 12:04:55,059:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-05 12:04:56,755:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-05 12:04:57,357:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '9.1.0', 'ipywidgets': '8.1.7', 'tqdm': '4.64.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.19.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '6.1.1', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.11', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '9.1.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.0', 'requests': '2.32.3', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.19.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.11.11', 'machine': 'AMD64'}}
  warnings.warn(

2025-06-05 12:04:57,600:INFO:Initializing predict_model()
2025-06-05 12:04:57,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002BFF2DBD910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BFE54D6B60>)
2025-06-05 12:04:57,600:INFO:Checking exceptions
2025-06-05 12:04:57,600:INFO:Preloading libraries
2025-06-05 12:04:57,600:INFO:Set up data.
2025-06-05 12:04:57,600:INFO:Set up index.
2025-06-05 18:11:04,989:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 18:11:04,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 18:11:04,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 18:11:04,991:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:26:48,362:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:26:48,373:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:26:48,373:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:26:48,373:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:32:11,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:32:11,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:32:11,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:32:11,002:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:41:37,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:41:37,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:41:37,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:41:37,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:47:22,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:47:22,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:47:22,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:47:22,105:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 19:47:49,190:INFO:Initializing load_model()
2025-06-05 19:47:49,190:INFO:load_model(model_name=models\test_model, platform=None, authentication=None, verbose=True)
2025-06-05 19:48:39,425:INFO:Initializing load_model()
2025-06-05 19:48:39,425:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-05 19:48:40,308:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-05 19:48:40,871:INFO:Initializing predict_model()
2025-06-05 19:48:40,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000208F6E14450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000208E9683A60>)
2025-06-05 19:48:40,871:INFO:Checking exceptions
2025-06-05 19:48:40,872:INFO:Preloading libraries
2025-06-05 19:48:40,872:INFO:Set up data.
2025-06-05 19:48:40,881:INFO:Set up index.
2025-06-05 19:48:40,904:INFO:Initializing load_model()
2025-06-05 19:48:40,905:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-05 20:35:09,796:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:35:09,796:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:35:09,796:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:35:09,796:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:41:31,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:41:31,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:41:31,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 20:41:31,833:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 21:15:53,645:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 21:15:53,645:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 21:15:53,645:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-05 21:15:53,645:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:25:24,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:25:24,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:25:24,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:25:24,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:54:53,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:54:53,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:54:53,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 10:54:53,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:40:02,763:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:40:02,763:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:40:02,763:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:40:02,763:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:44:53,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:44:53,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:44:53,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:44:53,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:47:50,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:47:50,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:47:50,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:47:50,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:52:30,655:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:52:30,655:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:52:30,655:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:52:30,655:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:57:08,214:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:57:08,214:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:57:08,214:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 11:57:08,214:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 12:55:56,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 12:55:56,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 12:55:56,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 12:55:56,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 13:19:25,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 13:19:25,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 13:19:25,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 13:19:25,263:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:17:35,544:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:17:35,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:17:35,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:17:35,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:25:49,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:25:49,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:25:49,674:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:25:49,676:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:26:58,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:26:58,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:26:58,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:26:58,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:35:09,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:35:09,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:35:09,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:35:09,640:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:39:54,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:39:54,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:39:54,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:39:54,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:41:52,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:41:52,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:41:52,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 14:41:52,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:25:17,961:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:25:17,961:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:25:17,961:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:25:17,961:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:34:14,329:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:34:14,329:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:34:14,329:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:34:14,329:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:37:33,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:37:33,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:37:33,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:37:33,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:38:41,951:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:38:41,951:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:38:41,951:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:38:41,951:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:42:51,831:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:42:51,832:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:42:51,832:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:42:51,832:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:45:04,120:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:45:04,120:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:45:04,120:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:45:04,120:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:47:36,475:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:47:36,475:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:47:36,475:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:47:36,475:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:48:31,982:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:48:31,982:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:48:31,983:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 15:48:31,983:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:47:18,285:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:47:18,285:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:47:18,285:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:47:18,285:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:55:51,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:55:51,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:55:51,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:55:51,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 17:57:58,029:INFO:Initializing load_model()
2025-06-06 17:57:58,029:INFO:load_model(model_name=models\test_model, platform=None, authentication=None, verbose=True)
2025-06-06 18:00:52,642:INFO:Initializing load_model()
2025-06-06 18:00:52,642:INFO:load_model(model_name=models\test_model, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:26,800:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:09:26,800:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:09:26,800:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:09:26,800:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:09:26,974:INFO:Initializing load_model()
2025-06-06 18:09:26,975:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:28,556:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-06 18:09:29,281:INFO:Initializing load_model()
2025-06-06 18:09:29,281:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:29,637:INFO:Initializing predict_model()
2025-06-06 18:09:29,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F53451750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F5349D8A0>)
2025-06-06 18:09:29,637:INFO:Checking exceptions
2025-06-06 18:09:29,637:INFO:Preloading libraries
2025-06-06 18:09:29,637:INFO:Set up data.
2025-06-06 18:09:29,643:INFO:Set up index.
2025-06-06 18:09:29,658:INFO:Initializing load_model()
2025-06-06 18:09:29,658:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:30,015:INFO:Initializing predict_model()
2025-06-06 18:09:30,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F60F1A710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F4F88BCE0>)
2025-06-06 18:09:30,015:INFO:Checking exceptions
2025-06-06 18:09:30,015:INFO:Preloading libraries
2025-06-06 18:09:30,016:INFO:Set up data.
2025-06-06 18:09:30,023:INFO:Set up index.
2025-06-06 18:09:30,041:INFO:Initializing load_model()
2025-06-06 18:09:30,041:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:30,362:INFO:Initializing predict_model()
2025-06-06 18:09:30,362:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F606126D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F534B0AE0>)
2025-06-06 18:09:30,362:INFO:Checking exceptions
2025-06-06 18:09:30,362:INFO:Preloading libraries
2025-06-06 18:09:30,362:INFO:Set up data.
2025-06-06 18:09:30,367:INFO:Set up index.
2025-06-06 18:09:30,384:INFO:Initializing load_model()
2025-06-06 18:09:30,384:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:30,687:INFO:Initializing predict_model()
2025-06-06 18:09:30,687:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F60F13ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F534B1440>)
2025-06-06 18:09:30,687:INFO:Checking exceptions
2025-06-06 18:09:30,687:INFO:Preloading libraries
2025-06-06 18:09:30,687:INFO:Set up data.
2025-06-06 18:09:30,687:INFO:Set up index.
2025-06-06 18:09:30,718:INFO:Initializing load_model()
2025-06-06 18:09:30,718:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:31,028:INFO:Initializing predict_model()
2025-06-06 18:09:31,028:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F53451750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F534B0AE0>)
2025-06-06 18:09:31,028:INFO:Checking exceptions
2025-06-06 18:09:31,028:INFO:Preloading libraries
2025-06-06 18:09:31,028:INFO:Set up data.
2025-06-06 18:09:31,028:INFO:Set up index.
2025-06-06 18:09:31,057:INFO:Initializing load_model()
2025-06-06 18:09:31,057:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:31,380:INFO:Initializing predict_model()
2025-06-06 18:09:31,380:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F60E48D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F4F88BCE0>)
2025-06-06 18:09:31,380:INFO:Checking exceptions
2025-06-06 18:09:31,380:INFO:Preloading libraries
2025-06-06 18:09:31,381:INFO:Set up data.
2025-06-06 18:09:31,384:INFO:Set up index.
2025-06-06 18:09:31,401:INFO:Initializing load_model()
2025-06-06 18:09:31,401:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:09:31,773:INFO:Initializing predict_model()
2025-06-06 18:09:31,774:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014F53497F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014F534B0900>)
2025-06-06 18:09:31,774:INFO:Checking exceptions
2025-06-06 18:09:31,774:INFO:Preloading libraries
2025-06-06 18:09:31,774:INFO:Set up data.
2025-06-06 18:09:31,779:INFO:Set up index.
2025-06-06 18:12:02,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:12:02,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:12:02,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:12:02,039:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 18:12:02,222:INFO:Initializing load_model()
2025-06-06 18:12:02,222:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:02,895:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-06 18:12:03,814:INFO:Initializing load_model()
2025-06-06 18:12:03,814:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:04,187:INFO:Initializing predict_model()
2025-06-06 18:12:04,187:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242EB60E890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB617EC0>)
2025-06-06 18:12:04,187:INFO:Checking exceptions
2025-06-06 18:12:04,187:INFO:Preloading libraries
2025-06-06 18:12:04,187:INFO:Set up data.
2025-06-06 18:12:04,191:INFO:Set up index.
2025-06-06 18:12:04,207:INFO:Initializing load_model()
2025-06-06 18:12:04,207:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:04,533:INFO:Initializing predict_model()
2025-06-06 18:12:04,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242F95C9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB626A20>)
2025-06-06 18:12:04,533:INFO:Checking exceptions
2025-06-06 18:12:04,533:INFO:Preloading libraries
2025-06-06 18:12:04,533:INFO:Set up data.
2025-06-06 18:12:04,552:INFO:Set up index.
2025-06-06 18:12:04,569:INFO:Initializing load_model()
2025-06-06 18:12:04,569:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:04,882:INFO:Initializing predict_model()
2025-06-06 18:12:04,882:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242D5944F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB617EC0>)
2025-06-06 18:12:04,882:INFO:Checking exceptions
2025-06-06 18:12:04,882:INFO:Preloading libraries
2025-06-06 18:12:04,882:INFO:Set up data.
2025-06-06 18:12:04,884:INFO:Set up index.
2025-06-06 18:12:04,905:INFO:Initializing load_model()
2025-06-06 18:12:04,905:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:05,208:INFO:Initializing predict_model()
2025-06-06 18:12:05,208:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242F7BF5590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB626F20>)
2025-06-06 18:12:05,208:INFO:Checking exceptions
2025-06-06 18:12:05,208:INFO:Preloading libraries
2025-06-06 18:12:05,209:INFO:Set up data.
2025-06-06 18:12:05,213:INFO:Set up index.
2025-06-06 18:12:05,231:INFO:Initializing load_model()
2025-06-06 18:12:05,231:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:05,530:INFO:Initializing predict_model()
2025-06-06 18:12:05,530:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242F95DF610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB626A20>)
2025-06-06 18:12:05,530:INFO:Checking exceptions
2025-06-06 18:12:05,530:INFO:Preloading libraries
2025-06-06 18:12:05,530:INFO:Set up data.
2025-06-06 18:12:05,530:INFO:Set up index.
2025-06-06 18:12:05,563:INFO:Initializing load_model()
2025-06-06 18:12:05,563:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:05,872:INFO:Initializing predict_model()
2025-06-06 18:12:05,872:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242F7ADB410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB617EC0>)
2025-06-06 18:12:05,872:INFO:Checking exceptions
2025-06-06 18:12:05,872:INFO:Preloading libraries
2025-06-06 18:12:05,872:INFO:Set up data.
2025-06-06 18:12:05,872:INFO:Set up index.
2025-06-06 18:12:05,902:INFO:Initializing load_model()
2025-06-06 18:12:05,902:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 18:12:06,203:INFO:Initializing predict_model()
2025-06-06 18:12:06,203:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000242F7B32450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000242EB626FC0>)
2025-06-06 18:12:06,203:INFO:Checking exceptions
2025-06-06 18:12:06,203:INFO:Preloading libraries
2025-06-06 18:12:06,203:INFO:Set up data.
2025-06-06 18:12:06,209:INFO:Set up index.
2025-06-06 19:50:28,202:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 19:50:28,202:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 19:50:28,202:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 19:50:28,202:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-06 19:50:28,436:INFO:Initializing load_model()
2025-06-06 19:50:28,436:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:29,967:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-06 19:50:31,169:INFO:Initializing load_model()
2025-06-06 19:50:31,169:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:31,496:INFO:Initializing predict_model()
2025-06-06 19:50:31,496:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024836AA4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002482A4A3880>)
2025-06-06 19:50:31,496:INFO:Checking exceptions
2025-06-06 19:50:31,496:INFO:Preloading libraries
2025-06-06 19:50:31,496:INFO:Set up data.
2025-06-06 19:50:31,511:INFO:Set up index.
2025-06-06 19:50:31,520:INFO:Initializing load_model()
2025-06-06 19:50:31,520:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:31,884:INFO:Initializing predict_model()
2025-06-06 19:50:31,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024838474250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002482A4A0680>)
2025-06-06 19:50:31,884:INFO:Checking exceptions
2025-06-06 19:50:31,884:INFO:Preloading libraries
2025-06-06 19:50:31,884:INFO:Set up data.
2025-06-06 19:50:31,889:INFO:Set up index.
2025-06-06 19:50:31,893:INFO:Initializing load_model()
2025-06-06 19:50:31,893:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:32,208:INFO:Initializing predict_model()
2025-06-06 19:50:32,208:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000248363D7D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002482A4A0680>)
2025-06-06 19:50:32,208:INFO:Checking exceptions
2025-06-06 19:50:32,208:INFO:Preloading libraries
2025-06-06 19:50:32,208:INFO:Set up data.
2025-06-06 19:50:32,208:INFO:Set up index.
2025-06-06 19:50:32,257:INFO:Initializing load_model()
2025-06-06 19:50:32,258:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:32,604:INFO:Initializing predict_model()
2025-06-06 19:50:32,606:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024838474250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002482A4A34C0>)
2025-06-06 19:50:32,606:INFO:Checking exceptions
2025-06-06 19:50:32,606:INFO:Preloading libraries
2025-06-06 19:50:32,606:INFO:Set up data.
2025-06-06 19:50:32,609:INFO:Set up index.
2025-06-06 19:50:32,611:INFO:Initializing load_model()
2025-06-06 19:50:32,611:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:32,926:INFO:Initializing predict_model()
2025-06-06 19:50:32,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002483836AA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002483850EDE0>)
2025-06-06 19:50:32,926:INFO:Checking exceptions
2025-06-06 19:50:32,926:INFO:Preloading libraries
2025-06-06 19:50:32,926:INFO:Set up data.
2025-06-06 19:50:32,943:INFO:Set up index.
2025-06-06 19:50:32,949:INFO:Initializing load_model()
2025-06-06 19:50:32,949:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:33,267:INFO:Initializing predict_model()
2025-06-06 19:50:33,267:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000248147C9010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002483850FEC0>)
2025-06-06 19:50:33,267:INFO:Checking exceptions
2025-06-06 19:50:33,267:INFO:Preloading libraries
2025-06-06 19:50:33,267:INFO:Set up data.
2025-06-06 19:50:33,267:INFO:Set up index.
2025-06-06 19:50:33,298:INFO:Initializing load_model()
2025-06-06 19:50:33,298:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-06 19:50:33,645:INFO:Initializing predict_model()
2025-06-06 19:50:33,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024836968650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002482A4A3740>)
2025-06-06 19:50:33,645:INFO:Checking exceptions
2025-06-06 19:50:33,645:INFO:Preloading libraries
2025-06-06 19:50:33,645:INFO:Set up data.
2025-06-06 19:50:33,645:INFO:Set up index.
2025-06-07 18:10:35,656:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-07 18:10:35,656:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-07 18:10:35,656:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-07 18:10:35,656:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-07 18:10:36,074:INFO:Initializing load_model()
2025-06-07 18:10:36,074:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-07 18:10:37,715:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-07 18:10:38,939:INFO:Initializing predict_model()
2025-06-07 18:10:38,939:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FC0A62410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FB2AAF240>)
2025-06-07 18:10:38,939:INFO:Checking exceptions
2025-06-07 18:10:38,939:INFO:Preloading libraries
2025-06-07 18:10:38,939:INFO:Set up data.
2025-06-07 18:10:38,958:INFO:Set up index.
2025-06-07 18:10:39,109:INFO:Initializing load_model()
2025-06-07 18:10:39,109:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-07 18:10:39,315:INFO:Initializing predict_model()
2025-06-07 18:10:39,315:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025FC0B33F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025FB2AAEF20>)
2025-06-07 18:10:39,315:INFO:Checking exceptions
2025-06-07 18:10:39,315:INFO:Preloading libraries
2025-06-07 18:10:39,315:INFO:Set up data.
2025-06-07 18:10:39,333:INFO:Set up index.
2025-06-08 12:37:30,290:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:37:30,291:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:37:30,291:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:37:30,291:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:37:30,834:INFO:Initializing load_model()
2025-06-08 12:37:30,834:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 12:37:31,830:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 12:37:32,998:INFO:Initializing predict_model()
2025-06-08 12:37:32,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E2C7C566D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E2F0553A60>)
2025-06-08 12:37:32,998:INFO:Checking exceptions
2025-06-08 12:37:32,998:INFO:Preloading libraries
2025-06-08 12:37:32,998:INFO:Set up data.
2025-06-08 12:37:33,018:INFO:Set up index.
2025-06-08 12:37:33,162:INFO:Initializing load_model()
2025-06-08 12:37:33,162:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 12:37:33,393:INFO:Initializing predict_model()
2025-06-08 12:37:33,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E2FE5E3E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E2F0553740>)
2025-06-08 12:37:33,393:INFO:Checking exceptions
2025-06-08 12:37:33,393:INFO:Preloading libraries
2025-06-08 12:37:33,393:INFO:Set up data.
2025-06-08 12:37:33,409:INFO:Set up index.
2025-06-08 12:44:12,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:44:12,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:44:12,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:44:12,853:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:45:09,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:45:09,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:45:09,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:45:09,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 12:45:10,049:INFO:Initializing load_model()
2025-06-08 12:45:10,049:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 12:45:10,803:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 12:45:11,811:INFO:Initializing predict_model()
2025-06-08 12:45:11,811:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000235F5E7F310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000235E83CBB00>)
2025-06-08 12:45:11,811:INFO:Checking exceptions
2025-06-08 12:45:11,811:INFO:Preloading libraries
2025-06-08 12:45:11,811:INFO:Set up data.
2025-06-08 12:45:11,855:INFO:Set up index.
2025-06-08 12:45:12,071:INFO:Initializing load_model()
2025-06-08 12:45:12,071:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 12:45:12,362:INFO:Initializing predict_model()
2025-06-08 12:45:12,362:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000235E8406FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000235E83CB7E0>)
2025-06-08 12:45:12,362:INFO:Checking exceptions
2025-06-08 12:45:12,362:INFO:Preloading libraries
2025-06-08 12:45:12,363:INFO:Set up data.
2025-06-08 12:45:12,401:INFO:Set up index.
2025-06-08 13:15:43,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 13:15:43,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 13:15:43,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 13:15:43,337:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 13:15:43,670:INFO:Initializing load_model()
2025-06-08 13:15:43,670:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 13:15:44,391:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 13:15:45,241:INFO:Initializing predict_model()
2025-06-08 13:15:45,241:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000028FFDF7BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028FFDEBFB00>)
2025-06-08 13:15:45,241:INFO:Checking exceptions
2025-06-08 13:15:45,241:INFO:Preloading libraries
2025-06-08 13:15:45,242:INFO:Set up data.
2025-06-08 13:15:45,271:INFO:Set up index.
2025-06-08 13:15:45,651:INFO:Initializing load_model()
2025-06-08 13:15:45,651:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 13:15:45,864:INFO:Initializing predict_model()
2025-06-08 13:15:45,864:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000028FFDF68890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000028F8BECAC00>)
2025-06-08 13:15:45,864:INFO:Checking exceptions
2025-06-08 13:15:45,864:INFO:Preloading libraries
2025-06-08 13:15:45,864:INFO:Set up data.
2025-06-08 13:15:45,894:INFO:Set up index.
2025-06-08 14:05:51,720:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:05:51,720:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:05:51,720:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:05:51,720:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:05:52,051:INFO:Initializing load_model()
2025-06-08 14:05:52,051:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:05:52,781:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 14:05:53,625:INFO:Initializing predict_model()
2025-06-08 14:05:53,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EC623D74D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EC6231FC40>)
2025-06-08 14:05:53,625:INFO:Checking exceptions
2025-06-08 14:05:53,625:INFO:Preloading libraries
2025-06-08 14:05:53,626:INFO:Set up data.
2025-06-08 14:05:53,653:INFO:Set up index.
2025-06-08 14:05:53,988:INFO:Initializing load_model()
2025-06-08 14:05:53,988:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:05:54,214:INFO:Initializing predict_model()
2025-06-08 14:05:54,214:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001EC62338D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EC6EFB4180>)
2025-06-08 14:05:54,214:INFO:Checking exceptions
2025-06-08 14:05:54,214:INFO:Preloading libraries
2025-06-08 14:05:54,214:INFO:Set up data.
2025-06-08 14:05:54,243:INFO:Set up index.
2025-06-08 14:08:16,728:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:08:16,728:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:08:16,728:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:08:16,728:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:20:50,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:20:50,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:20:50,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:20:50,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:22:06,725:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:22:06,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:22:06,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:22:06,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:22:45,482:INFO:Initializing load_model()
2025-06-08 14:22:45,482:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:22:46,304:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 14:22:46,646:INFO:Initializing predict_model()
2025-06-08 14:22:46,646:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000208ADAFBF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000208ADBA23E0>)
2025-06-08 14:22:46,646:INFO:Checking exceptions
2025-06-08 14:22:46,646:INFO:Preloading libraries
2025-06-08 14:22:46,646:INFO:Set up data.
2025-06-08 14:22:46,678:INFO:Set up index.
2025-06-08 14:22:46,906:INFO:Initializing load_model()
2025-06-08 14:22:46,906:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:23:37,037:INFO:Initializing load_model()
2025-06-08 14:23:37,038:INFO:load_model(model_name=models\top_model_1_GradientBoostingRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:23:37,098:INFO:Initializing predict_model()
2025-06-08 14:23:37,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020887BF1ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000208BC4A1A80>)
2025-06-08 14:23:37,099:INFO:Checking exceptions
2025-06-08 14:23:37,099:INFO:Preloading libraries
2025-06-08 14:23:37,099:INFO:Set up data.
2025-06-08 14:23:37,130:INFO:Set up index.
2025-06-08 14:23:37,308:INFO:Initializing load_model()
2025-06-08 14:23:37,309:INFO:load_model(model_name=models\top_model_1_GradientBoostingRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:23:53,589:INFO:Initializing load_model()
2025-06-08 14:23:53,590:INFO:load_model(model_name=models\top_model_3_RandomForestRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:23:53,851:INFO:Initializing predict_model()
2025-06-08 14:23:53,851:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000208BC571F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000208BC4A2160>)
2025-06-08 14:23:53,851:INFO:Checking exceptions
2025-06-08 14:23:53,851:INFO:Preloading libraries
2025-06-08 14:23:53,852:INFO:Set up data.
2025-06-08 14:23:53,886:INFO:Set up index.
2025-06-08 14:23:54,119:INFO:Initializing load_model()
2025-06-08 14:23:54,120:INFO:load_model(model_name=models\top_model_3_RandomForestRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 14:29:00,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:29:00,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:29:00,489:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:29:00,489:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:34:15,950:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:34:15,950:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:34:15,950:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 14:34:15,950:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:17:17,755:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:17:17,755:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:17:17,755:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:17:17,756:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:19:57,764:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:19:57,764:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:19:57,765:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:19:57,765:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:22:07,518:INFO:Initializing load_model()
2025-06-08 15:22:07,519:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 15:22:08,355:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 15:22:08,703:INFO:Initializing predict_model()
2025-06-08 15:22:08,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000012C9E2DFE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000012C9E2CDD00>)
2025-06-08 15:22:08,704:INFO:Checking exceptions
2025-06-08 15:22:08,704:INFO:Preloading libraries
2025-06-08 15:22:08,704:INFO:Set up data.
2025-06-08 15:22:08,735:INFO:Set up index.
2025-06-08 15:22:08,957:INFO:Initializing load_model()
2025-06-08 15:22:08,957:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 15:40:22,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:40:22,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:40:22,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:40:22,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-08 15:40:56,972:INFO:Initializing load_model()
2025-06-08 15:40:56,972:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 15:40:57,821:WARNING:C:\Users\jdche\.conda\envs\pycaret311\Lib\site-packages\dask\dataframe\__init__.py:49: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2025-06-08 15:40:58,166:INFO:Initializing predict_model()
2025-06-08 15:40:58,166:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020BB2167D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020BB2152700>)
2025-06-08 15:40:58,166:INFO:Checking exceptions
2025-06-08 15:40:58,166:INFO:Preloading libraries
2025-06-08 15:40:58,166:INFO:Set up data.
2025-06-08 15:40:58,197:INFO:Set up index.
2025-06-08 15:40:58,419:INFO:Initializing load_model()
2025-06-08 15:40:58,421:INFO:load_model(model_name=models\top_model_2_ExtraTreesRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 15:41:23,301:INFO:Initializing load_model()
2025-06-08 15:41:23,301:INFO:load_model(model_name=models\top_model_1_GradientBoostingRegressor, platform=None, authentication=None, verbose=True)
2025-06-08 15:41:23,359:INFO:Initializing predict_model()
2025-06-08 15:41:23,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020BB1F021D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['project_prf_year_of_project',
                                             'project_prf_functional_size',
                                             'project_prf_max_team_size',
                                             'process_pmf_docs',
                                             'tech_tf_tools_used',
                                             'project_prf_application_group_business_application',
                                             'project_prf_application_group_infrastructure_software',
                                             'project_prf_applic...
                                             'tech_tf_server_roles'],
                                    transformer=TargetEncoder(cols=['tech_tf_primary_programming_language',
                                                                    'tech_tf_server_roles'],
                                                              handle_missing='return_nan'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020B8A9A9620>)
2025-06-08 15:41:23,360:INFO:Checking exceptions
2025-06-08 15:41:23,360:INFO:Preloading libraries
2025-06-08 15:41:23,360:INFO:Set up data.
2025-06-08 15:41:23,408:INFO:Set up index.
2025-06-08 15:41:23,598:INFO:Initializing load_model()
2025-06-08 15:41:23,598:INFO:load_model(model_name=models\top_model_1_GradientBoostingRegressor, platform=None, authentication=None, verbose=True)
